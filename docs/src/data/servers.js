export const servers = [
  {
    "id": "affinity-groups",
    "name": "@access-mcp/affinity-groups",
    "version": "0.2.3",
    "description": "MCP server for ACCESS-CI Affinity Groups API",
    "readme": "# ACCESS-CI Affinity Groups MCP Server\n\nMCP server providing access to ACCESS-CI Affinity Groups API endpoints.\n\n## API Endpoints Covered\n\n- **Affinity Groups**: `/api/1.0/affinity_groups/{group_id}`\n- **Events & Trainings**: `/api/1.1/events/ag/{group_id}`\n- **Knowledge Base**: `/api/1.0/kb/{group_id}`\n\n## Tools\n\n### get_affinity_group\n\nGet basic information about a specific affinity group.\n\n**Parameters:**\n\n- `group_id` (string): The affinity group identifier (e.g., \"bridges2.psc.access-ci.org\")\n\n### get_affinity_group_events\n\nGet events and trainings for a specific affinity group.\n\n**Parameters:**\n\n- `group_id` (string): The affinity group identifier\n\n### get_affinity_group_kb\n\nGet knowledge base resources for a specific affinity group.\n\n**Parameters:**\n\n- `group_id` (string): The affinity group identifier\n\n## Usage\n\n```bash\n# Install and build\nnpm install\nnpm run build\n\n# Start the server\nnpm start\n```\n\nThe server runs on stdio transport and can be integrated with MCP-compatible clients.\n",
    "main": "dist/index.js",
    "bin": {
      "access-mcp-affinity-groups": "dist/index.js"
    }
  },
  {
    "id": "compute-resources",
    "name": "@access-mcp/compute-resources",
    "version": "0.2.3",
    "description": "MCP server for ACCESS-CI Compute Resources API",
    "readme": "# ACCESS-CI Compute Resources MCP Server\n\nMCP server providing access to ACCESS-CI compute resources information.\n\n## Overview\n\nThis server provides comprehensive information about compute resources available through ACCESS-CI, including hardware specifications, resource status, and detailed configurations.\n\n## Tools\n\n### list_compute_resources\n\nList all available ACCESS-CI compute resources.\n\n**Parameters:** None\n\n### get_compute_resource\n\nGet detailed information about a specific compute resource.\n\n**Parameters:**\n\n- `resource_id` (string): The resource ID or info_groupid (e.g., \"expanse.sdsc.xsede.org\")\n\n### get_resource_hardware\n\nGet hardware specifications for a compute resource.\n\n**Parameters:**\n\n- `resource_id` (string): The resource ID or info_groupid\n\n## Resources\n\n- `accessci://compute-resources`: Comprehensive information about all compute resources\n\n## Installation\n\n```bash\nnpm install -g @access-mcp/compute-resources\n```\n\n## Usage\n\nAdd to your Claude Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"access-compute-resources\": {\n      \"command\": \"access-mcp-compute-resources\"\n    }\n  }\n}\n```\n\n## API Endpoints\n\nThis server connects to the ACCESS-CI Operations API at `https://operations-api.access-ci.org`\n\n## License\n\nMIT\n",
    "main": "dist/index.js",
    "bin": {
      "access-mcp-compute-resources": "dist/index.js"
    }
  },
  {
    "id": "system-status",
    "name": "@access-mcp/system-status",
    "version": "0.2.3",
    "description": "MCP server for ACCESS-CI System Status and Outages API",
    "readme": "# ACCESS-CI System Status MCP Server\n\nMCP server providing real-time system status information for ACCESS-CI resources.\n\n## Overview\n\nThis server provides critical operational information about ACCESS-CI systems, including current outages, scheduled maintenance, and system-wide announcements.\n\n## Tools\n\n### get_current_outages\n\nGet current system outages and issues affecting ACCESS-CI resources.\n\n**Parameters:**\n\n- `resource_filter` (string, optional): Filter by specific resource name or ID\n\n### get_scheduled_maintenance\n\nGet scheduled maintenance and future outages for ACCESS-CI resources.\n\n**Parameters:**\n\n- `resource_filter` (string, optional): Filter by specific resource name or ID\n\n### get_system_announcements\n\nGet all system announcements (current and scheduled).\n\n**Parameters:**\n\n- `limit` (number, optional): Maximum number of announcements to return (default: 50)\n\n### get_resource_status\n\nGet the current operational status of a specific resource.\n\n**Parameters:**\n\n- `resource_id` (string): The resource ID to check status for\n\n## Resources\n\n- `accessci://system-status`: Current operational status of all ACCESS-CI resources\n\n## Installation\n\n```bash\nnpm install -g @access-mcp/system-status\n```\n\n## Usage\n\nAdd to your Claude Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"access-system-status\": {\n      \"command\": \"access-mcp-system-status\"\n    }\n  }\n}\n```\n\n## API Endpoints\n\nThis server connects to the ACCESS-CI Operations API at `https://operations-api.access-ci.org`\n\n## License\n\nMIT\n",
    "main": "dist/index.js",
    "bin": {
      "access-mcp-system-status": "dist/index.js"
    }
  },
  {
    "id": "software-discovery",
    "name": "@access-mcp/software-discovery",
    "version": "0.2.3",
    "description": "ACCESS-CI Software Discovery Service MCP server",
    "readme": "# ACCESS-CI Software Discovery MCP Server\n\nMCP server providing software discovery and search capabilities for ACCESS-CI resources.\n\n## Overview\n\nThis server enables searching and discovering software packages available across ACCESS-CI compute resources using the Software Discovery Service (SDS) API.\n\n## Tools\n\n### search_software\n\nSearch for software packages across ACCESS-CI resources.\n\n**Parameters:**\n\n- `query` (string): Search query for software names or descriptions\n- `resource_filter` (string, optional): Filter results by specific resource ID\n\n### list_software_by_resource\n\nList all available software packages for a specific ACCESS-CI resource.\n\n**Parameters:**\n\n- `resource_id` (string): The resource ID (e.g., \"expanse.sdsc.xsede.org\")\n- `limit` (number, optional): Maximum number of results (default: 100)\n\n### get_software_details\n\nGet detailed information about a specific software package on a resource.\n\n**Parameters:**\n\n- `software_name` (string): Name of the software package\n- `resource_id` (string): The resource ID where the software is installed\n\n### search_software_by_category\n\nSearch for software packages by category or domain.\n\n**Parameters:**\n\n- `category` (string): Software category (e.g., \"bioinformatics\", \"chemistry\", \"physics\")\n- `resource_filter` (string, optional): Filter by specific resource\n\n## Resources\n\n- `accessci://software-catalog`: Comprehensive catalog of available software across all resources\n\n## Installation\n\n```bash\nnpm install -g @access-mcp/software-discovery\n```\n\n## Usage\n\nAdd to your Claude Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"access-software-discovery\": {\n      \"command\": \"access-mcp-software-discovery\",\n      \"env\": {\n        \"SDS_API_KEY\": \"your-api-key-here\"\n      }\n    }\n  }\n}\n```\n\n## Environment Variables\n\n- `SDS_API_KEY`: API key for the Software Discovery Service (required)\n\n## API Endpoints\n\nThis server connects to the ACCESS-CI Software Discovery Service at `https://ara-db.ccs.uky.edu`\n\n## License\n\nMIT\n",
    "main": "dist/index.js",
    "bin": {
      "access-mcp-software-discovery": "dist/index.js"
    }
  },
  {
    "id": "xdmod-metrics",
    "name": "@access-mcp/xdmod-metrics",
    "version": "0.3.0",
    "description": "MCP server for XDMoD Metrics and Usage Analytics API",
    "readme": "# ACCESS-CI XDMoD Metrics MCP Server\n\nMCP server providing access to XDMoD (XD Metrics on Demand) Usage Analytics API endpoints for ACCESS-CI infrastructure metrics and statistics.\n\n## API Endpoints Covered\n\n- **Dimensions**: `/controllers/user_interface.php` - Get all available dimensions from Usage Tab\n- **Statistics**: `/controllers/user_interface.php` - Get available statistics for each dimension\n- **Chart Data**: `/controllers/user_interface.php` - Get raw chart data and metadata\n- **Chart Images**: `/controllers/user_interface.php` - Get chart images in SVG, PNG, or PDF format\n- **Chart Links**: Generate direct links to XDMoD portal charts\n- **Debug Tools**: Authentication status and troubleshooting utilities\n\n## Tools\n\n### get_dimensions\n\nGet all available dimensions from the XDMoD Usage Tab.\n\n**Parameters:** None\n\n**Returns:** List of all dimensions with their IDs, categories, and group-by fields.\n\n### get_statistics\n\nGet available statistics for a specific dimension.\n\n**Parameters:**\n\n- `dimension_id` (string): The dimension ID (e.g., \"Jobs_none\")\n- `category` (string): The realm/category (e.g., \"Jobs\")\n- `group_by` (string): The group by field (e.g., \"none\")\n\n**Returns:** List of statistics available for the specified dimension.\n\n### get_chart_data\n\nGet chart data and metadata for a specific statistic.\n\n**Parameters:**\n\n- `realm` (string): The realm (e.g., \"Jobs\")\n- `group_by` (string): The group by field (e.g., \"none\")\n- `statistic` (string): The statistic name (e.g., \"total_cpu_hours\")\n- `start_date` (string): Start date in YYYY-MM-DD format\n- `end_date` (string): End date in YYYY-MM-DD format\n- `dataset_type` (string, optional): Dataset type (default: \"timeseries\")\n\n**Returns:** Raw chart data including descriptions and metadata.\n\n### get_chart_image\n\nGet chart image (SVG, PNG, or PDF) for a specific statistic.\n\n**Parameters:**\n\n- `realm` (string): The realm (e.g., \"Jobs\")\n- `group_by` (string): The group by field (e.g., \"none\")\n- `statistic` (string): The statistic name (e.g., \"total_cpu_hours\")\n- `start_date` (string): Start date in YYYY-MM-DD format\n- `end_date` (string): End date in YYYY-MM-DD format\n- `format` (string, optional): Image format - \"svg\", \"png\", or \"pdf\" (default: \"svg\"). Note: PNG displays directly in Claude Desktop, SVG returns as data URL and code, PDF returns as downloadable data\n- `width` (number, optional): Image width in pixels (default: 916)\n- `height` (number, optional): Image height in pixels (default: 484)\n- `dataset_type` (string, optional): Dataset type (default: \"timeseries\")\n\n**Returns:** Chart image data in the requested format.\n\n### get_chart_link\n\nGenerate a direct link to view the chart in the XDMoD portal.\n\n**Parameters:**\n\n- `realm` (string): The realm (e.g., \"Jobs\", \"SUPREMM\")\n- `group_by` (string): The group by field (e.g., \"none\", \"resource\")\n- `statistic` (string): The statistic name (e.g., \"total_cpu_hours\", \"gpu_time\")\n\n**Returns:** Direct URL to view the interactive chart in XDMoD. Use the portal's filtering options to narrow down to specific resources, users, or other criteria.\n\n### debug_auth_status\n\nCheck authentication status and debug information.\n\n**Parameters:** None\n\n**Returns:** Comprehensive debugging information including:\n- API token status and configuration\n- Available tools and their authentication requirements  \n- Troubleshooting guidance for authentication issues\n- Environment variable and command-line argument detection\n\n## Authentication\n\nThe server supports optional API token authentication via the `XDMOD_API_TOKEN` environment variable. While authenticated access is configured, the current release focuses on public data access. Personal usage features are in development and preserved in `src/user-specific.ts` for future releases.\n\n## Quick Start with Claude Desktop\n\nAfter adding this server to your Claude Desktop configuration, you can ask natural language questions like:\n\n### 🔍 **Explore Available Metrics**\n\n- \"What dimensions are available in XDMoD?\"\n- \"Show me all statistics for the Jobs dimension\"\n- \"What metrics can I track for Cloud resources?\"\n\n### 📊 **Get Usage Data**\n\n- \"Show me total CPU hours for January 2024\"\n- \"What was the job count last month?\"\n- \"Get me the average wait time data for Q1 2024\"\n\n### 📈 **Generate Charts**\n\n- \"Create an SVG chart of CPU hours for the last 30 days\"\n- \"Generate a high-resolution PNG chart of job counts for March 2024\"\n- \"Show me a PDF chart of resource utilization trends\"\n\n### 🔗 **Portal Integration**\n\n- \"Give me a direct link to the CPU hours chart in XDMoD\"\n- \"Generate a link to view GPU usage by resource in the portal\"\n- \"How can I view this data interactively in the portal?\"\n\n## Detailed Usage Examples\n\n### Getting Available Dimensions\n\n**Natural Language**: \"What metrics are available in XDMoD?\"\n\n**Tool Call**:\n\n```typescript\nconst dimensions = await get_dimensions();\n```\n\n**Returns**: List of dimensions like Jobs, Cloud, Storage, GPU, etc.\n\n### Getting Statistics for a Dimension\n\n**Natural Language**: \"Show me what statistics I can get for Jobs\"\n\n**Tool Call**:\n\n```typescript\nconst statistics = await get_statistics({\n  dimension_id: \"Jobs_none\",\n  category: \"Jobs\",\n  group_by: \"none\",\n});\n```\n\n**Returns**: Metrics like total_cpu_hours, job_count, avg_cpu_hours, wait_time, etc.\n\n### Getting Chart Data\n\n**Natural Language**: \"Get me CPU hours data for January 2024\"\n\n**Tool Call**:\n\n```typescript\nconst chartData = await get_chart_data({\n  realm: \"Jobs\",\n  group_by: \"none\",\n  statistic: \"total_cpu_hours\",\n  start_date: \"2024-01-01\",\n  end_date: \"2024-01-31\",\n});\n```\n\n**Returns**: Raw data with chart descriptions and metadata\n\n### Getting GPU Usage Data\n\n**Natural Language**: \"Show me GPU usage on Bridges 2 for the last year\"\n\n**Tool Call**:\n\n```typescript\nconst gpuData = await get_chart_data({\n  realm: \"SUPREMM\",  // Use SUPREMM for GPU metrics!\n  group_by: \"resource\",\n  statistic: \"gpu_time\", // or \"avg_percent_gpu_usage\"\n  start_date: \"2024-01-01\",\n  end_date: \"2024-12-31\",\n  filters: {\n    resource: \"Bridges 2 GPU\"\n  }\n});\n```\n\n### Getting Chart Images\n\n**Natural Language**: \"Create a chart showing CPU usage trends for Q1 2024\"\n\n**Tool Call**:\n\n```typescript\n// SVG format (default)\nconst svgChart = await get_chart_image({\n  realm: \"Jobs\",\n  group_by: \"none\",\n  statistic: \"total_cpu_hours\",\n  start_date: \"2024-01-01\",\n  end_date: \"2024-03-31\",\n  format: \"svg\",\n});\n\n// High-resolution PNG\nconst pngChart = await get_chart_image({\n  realm: \"Jobs\",\n  group_by: \"none\",\n  statistic: \"total_cpu_hours\",\n  start_date: \"2024-01-01\",\n  end_date: \"2024-03-31\",\n  format: \"png\",\n  width: 1920,\n  height: 1080,\n});\n```\n\n### Getting Chart Links\n\n**Natural Language**: \"Give me a link to view this chart in XDMoD\"\n\n**Tool Call**:\n\n```typescript\n// Basic chart link\nconst chartLink = await get_chart_link({\n  realm: \"Jobs\",\n  group_by: \"none\",\n  statistic: \"total_cpu_hours\"\n});\n\n// GPU usage chart link grouped by resource\nconst gpuChartLink = await get_chart_link({\n  realm: \"SUPREMM\",\n  group_by: \"resource\", \n  statistic: \"gpu_time\"\n});\n```\n\n**Returns**: Direct URL like: `https://xdmod.access-ci.org/index.php#tg_usage?node=statistic&realm=Jobs&group_by=none&statistic=total_cpu_hours`\n\n## Understanding Realms\n\nXDMoD organizes metrics into different **realms** that provide different types of data:\n\n### **Jobs Realm** \nBasic job accounting and resource usage metrics:\n- `total_cpu_hours` - Total CPU Hours\n- `job_count` - Number of Jobs Ended\n- `avg_cpu_hours` - Average CPU Hours per Job\n- `total_waitduration_hours` - Total Wait Duration Hours\n- `avg_waitduration_hours` - Average Wait Duration Hours\n- `max_processors` - Maximum Processor Count\n- `total_ace` - ACCESS Credit Equivalents Charged: Total\n- `utilization` - ACCESS CPU Utilization\n\n### **SUPREMM Realm** \nDetailed performance analytics and system metrics:\n- `gpu_time` - **GPU Hours: Total** 🎯\n- `avg_percent_gpu_usage` - **Avg GPU usage: weighted by GPU hour** 🎯\n- `wall_time` - CPU Hours: Total\n- `cpu_time_user` - CPU Hours: User: Total\n- `avg_percent_cpu_user` - Avg CPU %: User: weighted by core-hour\n- `avg_flops_per_core` - Avg: FLOPS: Per Core weighted by core-hour\n- `avg_memory_per_core` - Avg: Memory: Per Core weighted by core-hour\n- `avg_ib_rx_bytes` - Avg: InfiniBand rate: Per Node weighted by node-hour\n\n**💡 For GPU metrics, always use the SUPREMM realm!**\n\n## Authentication \n\nThe server supports optional API token authentication for enhanced debugging and troubleshooting. The current release focuses on system-wide public metrics data from XDMoD.\n\n## Practical Workflows\n\n### 📊 **Monthly Reporting Workflow**\n\n1. \"What dimensions are available?\" → Choose your metric category\n2. \"Show me statistics for Jobs dimension\" → Pick relevant metrics\n3. \"Generate a chart of total CPU hours for last month\" → Get visual\n4. \"Give me the link to view this in XDMoD\" → Share with team\n\n### 🔍 **Performance Investigation**\n\n1. \"Get me job count data for the past week\"\n2. \"Show me average wait times for the same period\"\n3. \"Create a comparison chart of wait times vs job counts\"\n4. \"What's the correlation between usage and wait times?\"\n\n### 📈 **Capacity Planning**\n\n1. \"Show CPU usage trends for the last 6 months\"\n2. \"What are the peak usage periods?\"\n3. \"Generate high-resolution charts for presentation\"\n4. \"Export data for further analysis\"\n\n## Date Formats and Ranges\n\nAll date parameters must be in `YYYY-MM-DD` format:\n\n- `2024-01-01` - January 1st, 2024\n- `2024-12-31` - December 31st, 2024\n\n**Common Date Ranges**:\n\n- Last Month: Use first and last day of previous month\n- Quarter: Q1 = Jan 1 - Mar 31, Q2 = Apr 1 - Jun 30, etc.\n- Year to Date: Jan 1 to today's date\n- Custom Period: Any start and end date you need\n\n## Tips and Best Practices\n\n### 🎯 **Getting Started**\n\n1. Always start by exploring available dimensions\n2. Check what statistics are available for your chosen dimension\n3. Use descriptive natural language - Claude will map it to the right tools\n\n### 📊 **Working with Data**\n\n- Request data first to understand the structure\n- Then generate visualizations based on what you find\n- Use chart links to share interactive views with colleagues\n\n### 🖼️ **Chart Formats**\n\n- **SVG**: Best for web display and scaling\n- **PNG**: Best for presentations and documents\n- **PDF**: Best for archival and printing\n\n### 🔄 **Efficient Workflows**\n\n- Save frequently used date ranges\n- Bookmark generated portal links\n- Export data for longitudinal analysis\n\n## Authentication\n\n### **Public Access (Default)**\nBy default, this server uses public access to XDMoD APIs and provides general usage statistics and metrics.\n\n### **Authenticated Access (Personal Data)**\nFor access to personal usage data like \"show me my credit usage in the last 3 months\", you can set up authentication using an XDMoD API token.\n\n#### **Setting Up Authentication:**\n\n1. **Generate API Token:**\n   - Sign in to [XDMoD portal](https://xdmod.access-ci.org/)\n   - Click \"My Profile\" button (top-right corner)\n   - Click \"API Token\" tab\n   - Copy your token (save it securely - you won't see it again!)\n\n2. **Configure Authentication (Choose One):**\n\n   **Option A: Environment Variable**\n   ```bash\n   export XDMOD_API_TOKEN=\"your-token-here\"\n   npm start\n   ```\n\n   **Option B: Claude Desktop Config** *(Recommended)*\n   ```json\n   {\n     \"mcpServers\": {\n       \"xdmod-metrics\": {\n         \"command\": \"node\",\n         \"args\": [\n           \"/path/to/access_mcp/packages/xdmod-metrics/dist/index.js\",\n           \"--api-token\",\n           \"your-token-here\"\n         ]\n       }\n     }\n   }\n   ```\n\n3. **Test Authentication:**\n   Ask Claude: *\"Debug my XDMoD authentication status\"* to verify setup\n\n#### **Authentication Features:**\nWhen authenticated, you get enhanced debugging capabilities:\n\n- `debug_auth_status` - Comprehensive authentication status and troubleshooting\n\n#### **Example Authentication Queries:**\n- \"Debug my XDMoD authentication status\"\n- \"Check if my API token is working\"\n- \"Help me troubleshoot authentication issues\"\n\n**Note:** Personal usage data features are in development. The current release focuses on system-wide public metrics.\n\n## Data Source\n\nAll data is sourced from the ACCESS-CI XDMoD portal at https://xdmod.access-ci.org/\n\n## Usage\n\n```bash\n# Install and build\nnpm install\nnpm run build\n\n# Start the server\nnpm start\n```\n\nThe server runs on stdio transport and can be integrated with MCP-compatible clients.\n",
    "main": "dist/index.js",
    "bin": {
      "access-xdmod-metrics": "dist/index.js"
    }
  },
  {
    "id": "allocations",
    "name": "@access-mcp/allocations",
    "version": "0.1.0",
    "description": "MCP server for ACCESS-CI Allocations and Research Projects API",
    "readme": "# ACCESS-CI Allocations MCP Server\n\nMCP server providing access to ACCESS-CI allocations and research projects data.\n\n## Overview\n\nThis server provides comprehensive access to active research projects and allocations across the ACCESS-CI ecosystem, enabling project discovery, collaboration opportunities, and resource allocation analysis.\n\n## Tools\n\n### search_projects\n\nSearch ACCESS-CI research projects by keyword, PI name, or institution.\n\n**Parameters:**\n\n- `query` (string): Search query for project titles, abstracts, PI names, or institutions\n- `field_of_science` (string, optional): Filter by field of science\n- `allocation_type` (string, optional): Filter by allocation type\n- `limit` (number, optional): Maximum number of results to return (default: 20)\n\n### get_project_details\n\nGet detailed information about a specific research project.\n\n**Parameters:**\n\n- `project_id` (number): The project ID number\n\n### list_projects_by_field\n\nList projects by field of science.\n\n**Parameters:**\n\n- `field_of_science` (string): Field of science to filter by\n- `limit` (number, optional): Maximum number of results to return (default: 20)\n\n### list_projects_by_resource\n\nFind projects using specific computational resources.\n\n**Parameters:**\n\n- `resource_name` (string): Resource name to search for\n- `limit` (number, optional): Maximum number of results to return (default: 20)\n\n### get_allocation_statistics\n\nGet statistics about resource allocations and research trends.\n\n**Parameters:**\n\n- `pages_to_analyze` (number, optional): Number of pages to analyze for statistics (default: 5, max: 20)\n\n### find_similar_projects\n\nFind projects with similar research focus or abstracts.\n\n**Parameters:**\n\n- `project_id` (number, optional): Reference project ID to find similar projects\n- `keywords` (string, optional): Keywords to find similar projects\n- `limit` (number, optional): Maximum number of similar projects to return (default: 10)\n\n## Resources\n\n- `accessci://allocations`: ACCESS-CI Research Projects and Allocations data\n\n## Installation\n\n```bash\nnpm install -g @access-mcp/allocations\n```\n\n## Usage\n\nAdd to your Claude Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"access-allocations\": {\n      \"command\": \"npx\",\n      \"args\": [\"@access-mcp/allocations\"]\n    }\n  }\n}\n```\n\n## API Endpoints\n\nThis server connects to the ACCESS-CI Allocations portal at `https://allocations.access-ci.org`\n\n**Important Note:** ACCESS Credits are computational resource credits, NOT monetary currency.\n\n## License\n\nMIT",
    "main": "dist/index.js",
    "bin": {
      "access-allocations": "dist/index.js"
    }
  }
];

export function getServerById(id) {
  return servers.find(server => server.id === id);
}

export function getActiveServers() {
  return servers.filter(server => server.status !== 'planned');
}
