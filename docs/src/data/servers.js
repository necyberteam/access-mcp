export const servers = [
  {
    "id": "affinity-groups",
    "name": "@access-mcp/affinity-groups",
    "version": "0.3.0",
    "description": "MCP server for ACCESS-CI Affinity Groups API",
    "readme": "# Affinity Groups MCP Server\n\nMCP server providing access to ACCESS-CI Affinity Groups API endpoints.\n\n## API Endpoints Covered\n\n- **Affinity Groups**: `/api/1.0/affinity_groups/{group_id}`\n- **Events & Trainings**: `/api/1.1/events/ag/{group_id}`\n- **Knowledge Base**: `/api/1.0/kb/{group_id}`\n\n## Tools\n\n### get_affinity_group\n\nGet basic information about a specific affinity group.\n\n**Parameters:**\n\n- `group_id` (string): The affinity group identifier (e.g., \"bridges2.psc.access-ci.org\")\n\n### get_affinity_group_events\n\nGet events and trainings for a specific affinity group.\n\n**Parameters:**\n\n- `group_id` (string): The affinity group identifier\n\n### get_affinity_group_kb\n\nGet knowledge base resources for a specific affinity group.\n\n**Parameters:**\n\n- `group_id` (string): The affinity group identifier\n\n## Installation\n\n```bash\nnpm install -g @access-mcp/affinity-groups\n```\n\n## Configuration\n\nAdd to your Claude Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"access-affinity-groups\": {\n      \"command\": \"npx\",\n      \"args\": [\"@access-mcp/affinity-groups\"]\n    }\n  }\n}\n```\n\n## Usage Examples\n\n### üîç **Discover Community Resources**\n\n- \"What affinity groups are available for machine learning?\"\n- \"Show me information about the GPU computing affinity group\"\n- \"Find affinity groups related to bioinformatics\"\n\n### üìÖ **Find Events and Trainings**\n\n- \"What upcoming events are there for the bridges2.psc.access-ci.org group?\"\n- \"Show me training opportunities for GPU computing\"\n- \"Find workshops about parallel computing\"\n\n### üìö **Access Knowledge Base**\n\n- \"Get knowledge base resources for quantum computing\"\n- \"What documentation is available for the Anvil cluster?\"\n- \"Find tutorials for the Delta GPU system\"\n\n## Detailed Usage Examples\n\n### Getting Affinity Group Information\n\n**Natural Language**: \"Tell me about the Bridges-2 affinity group\"\n\n**Tool Call**:\n```typescript\nconst groupInfo = await get_affinity_group({\n  group_id: \"bridges2.psc.access-ci.org\"\n});\n```\n\n**Returns**: Group details including description, members, resources, and contact information.\n\n### Finding Events and Trainings\n\n**Natural Language**: \"What events are coming up for GPU computing?\"\n\n**Tool Call**:\n```typescript\nconst events = await get_affinity_group_events({\n  group_id: \"gpu-computing.access-ci.org\"\n});\n```\n\n**Returns**: List of upcoming workshops, training sessions, and community events.\n\n### Accessing Knowledge Base Resources\n\n**Natural Language**: \"Find documentation for the Delta system\"\n\n**Tool Call**:\n```typescript\nconst resources = await get_affinity_group_kb({\n  group_id: \"delta.ncsa.access-ci.org\"\n});\n```\n\n**Returns**: Documentation, tutorials, best practices, and user guides.\n",
    "main": "dist/index.js",
    "bin": {
      "access-mcp-affinity-groups": "dist/index.js"
    }
  },
  {
    "id": "compute-resources",
    "name": "@access-mcp/compute-resources",
    "version": "0.3.0",
    "description": "MCP server for ACCESS-CI Compute Resources API",
    "readme": "# Compute Resources MCP Server\n\nMCP server providing access to ACCESS-CI compute resources information.\n\n## Overview\n\nThis server provides comprehensive information about compute resources available through ACCESS-CI, including hardware specifications, resource status, and detailed configurations.\n\n## Tools\n\n### list_compute_resources\n\nList all available ACCESS-CI compute resources.\n\n**Parameters:** None\n\n### get_compute_resource\n\nGet detailed information about a specific compute resource.\n\n**Parameters:**\n\n- `resource_id` (string): The resource ID or info_groupid (e.g., \"expanse.sdsc.xsede.org\")\n\n### get_resource_hardware\n\nGet hardware specifications for a compute resource.\n\n**Parameters:**\n\n- `resource_id` (string): The resource ID or info_groupid\n\n## Resources\n\n- `accessci://compute-resources`: Comprehensive information about all compute resources\n\n## Installation\n\n```bash\nnpm install -g @access-mcp/compute-resources\n```\n\n## Configuration\n\nAdd to your Claude Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"access-compute-resources\": {\n      \"command\": \"npx\",\n      \"args\": [\"@access-mcp/compute-resources\"]\n    }\n  }\n}\n```\n\n## Usage Examples\n\n### üñ•Ô∏è **Discover Available Resources**\n\n- \"What compute resources are available on ACCESS-CI?\"\n- \"Show me all GPU-enabled systems\"\n- \"Which systems have the most CPU cores?\"\n\n### üîç **Get Resource Details**\n\n- \"Tell me about the Expanse cluster at SDSC\"\n- \"What are the specifications of the Delta system?\"\n- \"Show me details about Bridges-2 at PSC\"\n\n### üíª **Hardware Specifications**\n\n- \"What GPUs are available on Delta?\"\n- \"How much memory does Anvil have per node?\"\n- \"What's the interconnect on Frontera?\"\n\n## Detailed Usage Examples\n\n### Listing All Compute Resources\n\n**Natural Language**: \"Show me all available ACCESS-CI compute resources\"\n\n**Tool Call**:\n```typescript\nconst resources = await list_compute_resources();\n```\n\n**Returns**: Complete list of all compute resources with names, organizations, and basic specs.\n\n### Getting Detailed Resource Information\n\n**Natural Language**: \"Tell me everything about the Expanse cluster\"\n\n**Tool Call**:\n```typescript\nconst details = await get_compute_resource({\n  resource_id: \"expanse.sdsc.xsede.org\"\n});\n```\n\n**Returns**: Comprehensive information including:\n- System architecture and configuration\n- Node types and counts\n- Storage systems\n- Software environment\n- Access methods\n- Support information\n\n### Querying Hardware Specifications\n\n**Natural Language**: \"What hardware does Delta have?\"\n\n**Tool Call**:\n```typescript\nconst hardware = await get_resource_hardware({\n  resource_id: \"delta.ncsa.xsede.org\"\n});\n```\n\n**Returns**: Detailed hardware specifications:\n- CPU models and core counts\n- GPU models and configurations\n- Memory per node\n- Interconnect technology\n- Storage specifications\n\n## API Endpoints\n\nThis server connects to the ACCESS-CI Operations API at `https://operations-api.access-ci.org`\n\n## License\n\nMIT\n",
    "main": "dist/index.js",
    "bin": {
      "access-mcp-compute-resources": "dist/index.js"
    }
  },
  {
    "id": "system-status",
    "name": "@access-mcp/system-status",
    "version": "0.3.0",
    "description": "MCP server for ACCESS-CI System Status and Outages API",
    "readme": "# System Status MCP Server\n\nMCP server providing real-time system status information for ACCESS-CI resources.\n\n## Overview\n\nThis server provides critical operational information about ACCESS-CI systems, including current outages, scheduled maintenance, and system-wide announcements.\n\n## Tools\n\n### get_current_outages\n\nGet current system outages and issues affecting ACCESS-CI resources.\n\n**Parameters:**\n\n- `resource_filter` (string, optional): Filter by specific resource name or ID\n\n### get_scheduled_maintenance\n\nGet scheduled maintenance and future outages for ACCESS-CI resources.\n\n**Parameters:**\n\n- `resource_filter` (string, optional): Filter by specific resource name or ID\n\n### get_system_announcements\n\nGet all system announcements (current and scheduled).\n\n**Parameters:**\n\n- `limit` (number, optional): Maximum number of announcements to return (default: 50)\n\n### get_resource_status\n\nGet the current operational status of a specific resource.\n\n**Parameters:**\n\n- `resource_id` (string): The resource ID to check status for\n\n## Resources\n\n- `accessci://system-status`: Current operational status of all ACCESS-CI resources\n\n## Installation\n\n```bash\nnpm install -g @access-mcp/system-status\n```\n\n## Configuration\n\nAdd to your Claude Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"access-system-status\": {\n      \"command\": \"npx\",\n      \"args\": [\"@access-mcp/system-status\"]\n    }\n  }\n}\n```\n\n## Usage Examples\n\n### üö® **Monitor Current Issues**\n\n- \"Are there any current outages on ACCESS-CI?\"\n- \"Is Delta currently operational?\"\n- \"What systems are experiencing issues right now?\"\n\n### üîß **Track Maintenance Windows**\n\n- \"When is the next maintenance for Expanse?\"\n- \"Show me all scheduled maintenance for this week\"\n- \"Is there upcoming maintenance on Bridges-2?\"\n\n### üì¢ **System Announcements**\n\n- \"What are the latest system announcements?\"\n- \"Are there any important notices for ACCESS users?\"\n- \"Show me recent updates about system changes\"\n\n### ‚úÖ **Check Resource Status**\n\n- \"What's the current status of Anvil?\"\n- \"Is Frontera available for job submission?\"\n- \"Check if all GPU systems are operational\"\n\n## Detailed Usage Examples\n\n### Checking Current Outages\n\n**Natural Language**: \"Are there any systems down right now?\"\n\n**Tool Call**:\n```typescript\nconst outages = await get_current_outages();\n```\n\n**Returns**: List of active outages with:\n- Affected resources\n- Start time and expected resolution\n- Impact description\n- Workaround information if available\n\n### Finding Scheduled Maintenance\n\n**Natural Language**: \"When is Delta scheduled for maintenance?\"\n\n**Tool Call**:\n```typescript\nconst maintenance = await get_scheduled_maintenance({\n  resource_filter: \"delta\"\n});\n```\n\n**Returns**: Upcoming maintenance windows including:\n- Scheduled start and end times\n- Systems affected\n- Type of maintenance\n- Expected impact on users\n\n### Getting System Announcements\n\n**Natural Language**: \"What are the latest announcements?\"\n\n**Tool Call**:\n```typescript\nconst announcements = await get_system_announcements({\n  limit: 10\n});\n```\n\n**Returns**: Recent announcements about:\n- Policy changes\n- New features or services\n- Important deadlines\n- System-wide updates\n\n### Checking Specific Resource Status\n\n**Natural Language**: \"Is Expanse available?\"\n\n**Tool Call**:\n```typescript\nconst status = await get_resource_status({\n  resource_id: \"expanse.sdsc.xsede.org\"\n});\n```\n\n**Returns**: Current operational status:\n- Overall system health\n- Service availability\n- Performance metrics\n- Any active issues or limitations\n\n## API Endpoints\n\nThis server connects to the ACCESS-CI Operations API at `https://operations-api.access-ci.org`\n\n## License\n\nMIT\n",
    "main": "dist/index.js",
    "bin": {
      "access-mcp-system-status": "dist/index.js"
    }
  },
  {
    "id": "software-discovery",
    "name": "@access-mcp/software-discovery",
    "version": "0.3.0",
    "description": "ACCESS-CI Software Discovery Service MCP server",
    "readme": "# Software Discovery MCP Server\n\nMCP server providing software discovery and search capabilities for ACCESS-CI resources.\n\n## Overview\n\nThis server enables searching and discovering software packages available across ACCESS-CI compute resources using the Software Discovery Service (SDS) API.\n\n## Tools\n\n### search_software\n\nSearch for software packages across ACCESS-CI resources.\n\n**Parameters:**\n\n- `query` (string): Search query for software names or descriptions\n- `resource_filter` (string, optional): Filter results by specific resource ID\n\n### list_software_by_resource\n\nList all available software packages for a specific ACCESS-CI resource.\n\n**Parameters:**\n\n- `resource_id` (string): The resource ID (e.g., \"expanse.sdsc.access-ci.org\", legacy XSEDE format also supported)\n- `limit` (number, optional): Maximum number of results (default: 100)\n\n### get_software_details\n\nGet detailed information about a specific software package on a resource.\n\n**Parameters:**\n\n- `software_name` (string): Name of the software package\n- `resource_id` (string): The resource ID where the software is installed\n\n### search_software_by_category\n\nSearch for software packages by category or domain.\n\n**Parameters:**\n\n- `category` (string): Software category (e.g., \"bioinformatics\", \"chemistry\", \"physics\")\n- `resource_filter` (string, optional): Filter by specific resource\n\n## Resources\n\n- `accessci://software-catalog`: Comprehensive catalog of available software across all resources\n\n## Installation\n\n```bash\nnpm install -g @access-mcp/software-discovery\n```\n\n## Configuration\n\nAdd to your Claude Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"access-software-discovery\": {\n      \"command\": \"npx\",\n      \"args\": [\"@access-mcp/software-discovery\"],\n      \"env\": {\n        \"SDS_API_KEY\": \"your-api-key-here\"\n      }\n    }\n  }\n}\n```\n\n## Environment Variables\n\n- `SDS_API_KEY`: API key for the Software Discovery Service (required)\n\n## Resource ID Compatibility\n\nThis server supports both current ACCESS-CI format and legacy XSEDE format resource IDs:\n\n- **Preferred format**: `anvil.purdue.access-ci.org`\n- **Legacy XSEDE format**: `anvil.purdue.xsede.org` (automatically converted)\n- **Other legacy formats**: `delta.ncsa.illinois.edu` (automatically converted)\n\n## Usage Examples\n\n### üîç **Search for Software**\n\n- \"Is TensorFlow available on ACCESS-CI resources?\"\n- \"Find all Python packages on Delta\"\n- \"What versions of GROMACS are available?\"\n\n### üì¶ **Browse by Resource**\n\n- \"What software is available on Expanse?\"\n- \"List all bioinformatics tools on Bridges-2\"\n- \"Show me GPU-optimized software on Delta\"\n\n### üè∑Ô∏è **Category-Based Discovery**\n\n- \"Find all chemistry software packages\"\n- \"What machine learning frameworks are available?\"\n- \"Show me computational fluid dynamics tools\"\n\n### üìã **Software Details**\n\n- \"Tell me about the PyTorch installation on Delta\"\n- \"What modules do I need to load for VASP on Expanse?\"\n- \"How do I use MATLAB on Anvil?\"\n\n## Detailed Usage Examples\n\n### Searching for Specific Software\n\n**Natural Language**: \"Is PyTorch available on any ACCESS resources?\"\n\n**Tool Call**:\n```typescript\nconst results = await search_software({\n  query: \"PyTorch\"\n});\n```\n\n**Returns**: List of resources with PyTorch installed, including:\n- Available versions\n- Module names\n- Installation paths\n- Dependencies\n\n### Listing Software on a Resource\n\n**Natural Language**: \"What software is available on Delta?\"\n\n**Tool Call**:\n```typescript\nconst software = await list_software_by_resource({\n  resource_id: \"delta.ncsa.access-ci.org\",\n  limit: 50\n});\n```\n\n**Returns**: Comprehensive software inventory including:\n- Application names and versions\n- Module load commands\n- Software categories\n- License information\n\n### Getting Software Details\n\n**Natural Language**: \"How do I use GROMACS on Expanse?\"\n\n**Tool Call**:\n```typescript\nconst details = await get_software_details({\n  software_name: \"GROMACS\",\n  resource_id: \"expanse.sdsc.access-ci.org\"\n});\n```\n\n**Returns**: Detailed usage information:\n- Module load commands\n- Environment setup\n- Example job scripts\n- Documentation links\n- Performance tips\n\n### Searching by Category\n\n**Natural Language**: \"What bioinformatics tools are available?\"\n\n**Tool Call**:\n```typescript\nconst biotools = await search_software_by_category({\n  category: \"bioinformatics\"\n});\n```\n\n**Returns**: Category-specific software across all resources:\n- Popular packages in the domain\n- Resource availability\n- Version compatibility\n- Community usage statistics\n\n## API Endpoints\n\nThis server connects to the ACCESS-CI Software Discovery Service at `https://ara-db.ccs.uky.edu`\n\n## License\n\nMIT\n",
    "main": "dist/index.js",
    "bin": {
      "access-mcp-software-discovery": "dist/index.js"
    }
  },
  {
    "id": "xdmod-metrics",
    "name": "@access-mcp/xdmod-metrics",
    "version": "0.4.0",
    "description": "MCP server for XDMoD Metrics and Usage Analytics API",
    "readme": "# XDMoD Metrics MCP Server\n\nMCP server providing access to XDMoD (XD Metrics on Demand) Usage Analytics API endpoints for ACCESS-CI infrastructure metrics and statistics, enhanced with NSF Awards integration for comprehensive research funding context.\n\n## API Endpoints Covered\n\n- **Dimensions**: `/controllers/user_interface.php` - Get all available dimensions from Usage Tab\n- **Statistics**: `/controllers/user_interface.php` - Get available statistics for each dimension\n- **Chart Data**: `/controllers/user_interface.php` - Get raw chart data and metadata\n- **Chart Images**: `/controllers/user_interface.php` - Get chart images in SVG, PNG, or PDF format\n- **Chart Links**: Generate direct links to XDMoD portal charts\n- **NSF Awards**: `https://api.nsf.gov/services/v1/awards.json` - NSF award details and search\n- **Debug Tools**: Authentication status and troubleshooting utilities\n\n## Tools\n\n### get_dimensions\n\nGet all available dimensions from the XDMoD Usage Tab.\n\n**Parameters:** None\n\n**Returns:** List of all dimensions with their IDs, categories, and group-by fields.\n\n### get_statistics\n\nGet available statistics for a specific dimension.\n\n**Parameters:**\n\n- `dimension_id` (string): The dimension ID (e.g., \"Jobs_none\")\n- `category` (string): The realm/category (e.g., \"Jobs\")\n- `group_by` (string): The group by field (e.g., \"none\")\n\n**Returns:** List of statistics available for the specified dimension.\n\n### get_chart_data\n\nGet chart data and metadata for a specific statistic.\n\n**Parameters:**\n\n- `realm` (string): The realm (e.g., \"Jobs\")\n- `group_by` (string): The group by field (e.g., \"none\")\n- `statistic` (string): The statistic name (e.g., \"total_cpu_hours\")\n- `start_date` (string): Start date in YYYY-MM-DD format\n- `end_date` (string): End date in YYYY-MM-DD format\n- `dataset_type` (string, optional): Dataset type (default: \"timeseries\")\n\n**Returns:** Raw chart data including descriptions and metadata.\n\n### get_chart_image\n\nGet chart image (SVG, PNG, or PDF) for a specific statistic.\n\n**Parameters:**\n\n- `realm` (string): The realm (e.g., \"Jobs\")\n- `group_by` (string): The group by field (e.g., \"none\")\n- `statistic` (string): The statistic name (e.g., \"total_cpu_hours\")\n- `start_date` (string): Start date in YYYY-MM-DD format\n- `end_date` (string): End date in YYYY-MM-DD format\n- `format` (string, optional): Image format - \"svg\", \"png\", or \"pdf\" (default: \"svg\"). Note: PNG displays directly in Claude Desktop, SVG returns as data URL and code, PDF returns as downloadable data\n- `width` (number, optional): Image width in pixels (default: 916)\n- `height` (number, optional): Image height in pixels (default: 484)\n- `dataset_type` (string, optional): Dataset type (default: \"timeseries\")\n\n**Returns:** Chart image data in the requested format.\n\n### get_chart_link\n\nGenerate a direct link to view the chart in the XDMoD portal.\n\n**Parameters:**\n\n- `realm` (string): The realm (e.g., \"Jobs\", \"SUPREMM\")\n- `group_by` (string): The group by field (e.g., \"none\", \"resource\")\n- `statistic` (string): The statistic name (e.g., \"total_cpu_hours\", \"gpu_time\")\n\n**Returns:** Direct URL to view the interactive chart in XDMoD. Use the portal's filtering options to narrow down to specific resources, users, or other criteria.\n\n### get_nsf_award\n\nGet NSF award details for a specific award number.\n\n**Parameters:**\n\n- `award_number` (string): NSF award number (e.g., '2138259')\n\n### find_nsf_awards_by_pi\n\nFind NSF awards for a specific Principal Investigator.\n\n**Parameters:**\n\n- `pi_name` (string): Principal Investigator name to search for\n- `limit` (number, optional): Maximum number of awards to return (default: 10)\n\n### find_nsf_awards_by_personnel\n\nSearch NSF awards by Principal Investigator name.\n\n**Note:** Co-PI and Program Officer searches are not reliable in the NSF API and have been removed.\n\n**Parameters:**\n\n- `person_name` (string): Principal Investigator name to search for\n- `limit` (number, optional): Maximum number of awards to return (default: 10)\n\n### get_usage_with_nsf_context\n\nGet XDMoD usage data enriched with NSF funding context for a researcher or institution.\n\n**Parameters:**\n\n- `researcher_name` (string, optional): Name of researcher to analyze\n- `institution_name` (string, optional): Institution to analyze\n- `start_date` (string): Start date in YYYY-MM-DD format\n- `end_date` (string): End date in YYYY-MM-DD format\n- `limit` (number, optional): Maximum NSF awards to include (default: 10)\n\n**Returns:** Combined analysis including XDMoD usage metrics and associated NSF funding portfolio\n\n### analyze_funding_vs_usage\n\nCompare NSF funding amounts with actual XDMoD computational usage patterns.\n\n**Parameters:**\n\n- `nsf_award_number` (string): Specific NSF award number to analyze\n- `start_date` (string): Start date in YYYY-MM-DD format  \n- `end_date` (string): End date in YYYY-MM-DD format\n\n**Returns:** Comparative analysis of funding allocation versus computational resource consumption\n\n### institutional_research_profile\n\nGenerate a comprehensive research profile combining XDMoD usage patterns with NSF funding for an institution.\n\n**Parameters:**\n\n- `institution_name` (string): Institution name to profile\n- `start_date` (string): Start date in YYYY-MM-DD format\n- `end_date` (string): End date in YYYY-MM-DD format\n- `limit` (number, optional): Maximum NSF awards to include (default: 20)\n\n**Returns:** Comprehensive institutional profile with funding and usage correlation analysis\n\n### debug_auth_status\n\nCheck authentication status and debug information.\n\n**Parameters:** None\n\n**Returns:** Comprehensive debugging information including:\n- API token status and configuration\n- Available tools and their authentication requirements  \n- Troubleshooting guidance for authentication issues\n- Environment variable and command-line argument detection\n\n## Authentication\n\nThe server supports optional API token authentication via the `XDMOD_API_TOKEN` environment variable. While authenticated access is configured, the current release focuses on public data access. Personal usage features are in development and preserved in `src/user-specific.ts` for future releases.\n\n## Quick Start with Claude Desktop\n\nAfter adding this server to your Claude Desktop configuration, you can ask natural language questions like:\n\n### üîç **Explore Available Metrics**\n\n- \"What dimensions are available in XDMoD?\"\n- \"Show me all statistics for the Jobs dimension\"\n- \"What metrics can I track for Cloud resources?\"\n\n### üìä **Get Usage Data**\n\n- \"Show me total CPU hours for January 2024\"\n- \"What was the job count last month?\"\n- \"Get me the average wait time data for Q1 2024\"\n\n### üìà **Generate Charts**\n\n- \"Create an SVG chart of CPU hours for the last 30 days\"\n- \"Generate a high-resolution PNG chart of job counts for March 2024\"\n- \"Show me a PDF chart of resource utilization trends\"\n\n### üîó **Portal Integration**\n\n- \"Give me a direct link to the CPU hours chart in XDMoD\"\n- \"Generate a link to view GPU usage by resource in the portal\"\n- \"How can I view this data interactively in the portal?\"\n\n### üî¨ **NSF Integration & Research Analysis**\n\n- \"Show me Dr. Smith's computational usage with their NSF funding context\"\n- \"Analyze how NSF award 2138259's funding correlates with actual usage\"\n- \"Generate a research profile for University of Illinois combining usage and NSF funding\"\n- \"Compare funding allocation versus computational resource consumption\"\n\n## Detailed Usage Examples\n\n### Getting Available Dimensions\n\n**Natural Language**: \"What metrics are available in XDMoD?\"\n\n**Tool Call**:\n\n```typescript\nconst dimensions = await get_dimensions();\n```\n\n**Returns**: List of dimensions like Jobs, Cloud, Storage, GPU, etc.\n\n### Getting Statistics for a Dimension\n\n**Natural Language**: \"Show me what statistics I can get for Jobs\"\n\n**Tool Call**:\n\n```typescript\nconst statistics = await get_statistics({\n  dimension_id: \"Jobs_none\",\n  category: \"Jobs\",\n  group_by: \"none\",\n});\n```\n\n**Returns**: Metrics like total_cpu_hours, job_count, avg_cpu_hours, wait_time, etc.\n\n### Getting Chart Data\n\n**Natural Language**: \"Get me CPU hours data for January 2024\"\n\n**Tool Call**:\n\n```typescript\nconst chartData = await get_chart_data({\n  realm: \"Jobs\",\n  group_by: \"none\",\n  statistic: \"total_cpu_hours\",\n  start_date: \"2024-01-01\",\n  end_date: \"2024-01-31\",\n});\n```\n\n**Returns**: Raw data with chart descriptions and metadata\n\n### Getting GPU Usage Data\n\n**Natural Language**: \"Show me GPU usage on Bridges 2 for the last year\"\n\n**Tool Call**:\n\n```typescript\nconst gpuData = await get_chart_data({\n  realm: \"SUPREMM\",  // Use SUPREMM for GPU metrics!\n  group_by: \"resource\",\n  statistic: \"gpu_time\", // or \"avg_percent_gpu_usage\"\n  start_date: \"2024-01-01\",\n  end_date: \"2024-12-31\",\n  filters: {\n    resource: \"Bridges 2 GPU\"\n  }\n});\n```\n\n### Getting Chart Images\n\n**Natural Language**: \"Create a chart showing CPU usage trends for Q1 2024\"\n\n**Tool Call**:\n\n```typescript\n// SVG format (default)\nconst svgChart = await get_chart_image({\n  realm: \"Jobs\",\n  group_by: \"none\",\n  statistic: \"total_cpu_hours\",\n  start_date: \"2024-01-01\",\n  end_date: \"2024-03-31\",\n  format: \"svg\",\n});\n\n// High-resolution PNG\nconst pngChart = await get_chart_image({\n  realm: \"Jobs\",\n  group_by: \"none\",\n  statistic: \"total_cpu_hours\",\n  start_date: \"2024-01-01\",\n  end_date: \"2024-03-31\",\n  format: \"png\",\n  width: 1920,\n  height: 1080,\n});\n```\n\n### Getting Chart Links\n\n**Natural Language**: \"Give me a link to view this chart in XDMoD\"\n\n**Tool Call**:\n\n```typescript\n// Basic chart link\nconst chartLink = await get_chart_link({\n  realm: \"Jobs\",\n  group_by: \"none\",\n  statistic: \"total_cpu_hours\"\n});\n\n// GPU usage chart link grouped by resource\nconst gpuChartLink = await get_chart_link({\n  realm: \"SUPREMM\",\n  group_by: \"resource\", \n  statistic: \"gpu_time\"\n});\n```\n\n**Returns**: Direct URL like: `https://xdmod.access-ci.org/index.php#tg_usage?node=statistic&realm=Jobs&group_by=none&statistic=total_cpu_hours`\n\n### Research Analysis with NSF Integration\n\n**Natural Language**: \"Analyze Dr. Smith's computational usage with their NSF funding context for 2024\"\n\n**Tool Call**:\n\n```typescript\nconst researchAnalysis = await get_usage_with_nsf_context({\n  researcher_name: \"John Smith\",\n  start_date: \"2024-01-01\",\n  end_date: \"2024-12-31\",\n  limit: 5\n});\n```\n\n**Returns**: Combined analysis showing XDMoD usage patterns alongside NSF funding portfolio\n\n### Funding vs Usage Analysis\n\n**Natural Language**: \"Compare NSF award 2138259's funding with actual computational usage\"\n\n**Tool Call**:\n\n```typescript\nconst fundingAnalysis = await analyze_funding_vs_usage({\n  nsf_award_number: \"2138259\",\n  start_date: \"2024-01-01\",\n  end_date: \"2024-12-31\"\n});\n```\n\n**Returns**: Detailed comparison of funding allocation versus actual resource consumption\n\n### Institutional Research Profile\n\n**Natural Language**: \"Generate a comprehensive research profile for University of Illinois\"\n\n**Tool Call**:\n\n```typescript\nconst institutionProfile = await institutional_research_profile({\n  institution_name: \"University of Illinois\",\n  start_date: \"2024-01-01\", \n  end_date: \"2024-12-31\",\n  limit: 15\n});\n```\n\n**Returns**: Complete institutional analysis combining usage patterns with NSF funding landscape\n\n## Understanding Realms\n\nXDMoD organizes metrics into different **realms** that provide different types of data:\n\n### **Jobs Realm** \nBasic job accounting and resource usage metrics:\n- `total_cpu_hours` - Total CPU Hours\n- `job_count` - Number of Jobs Ended\n- `avg_cpu_hours` - Average CPU Hours per Job\n- `total_waitduration_hours` - Total Wait Duration Hours\n- `avg_waitduration_hours` - Average Wait Duration Hours\n- `max_processors` - Maximum Processor Count\n- `total_ace` - ACCESS Credit Equivalents Charged: Total\n- `utilization` - ACCESS CPU Utilization\n\n### **SUPREMM Realm** \nDetailed performance analytics and system metrics:\n- `gpu_time` - **GPU Hours: Total** üéØ\n- `avg_percent_gpu_usage` - **Avg GPU usage: weighted by GPU hour** üéØ\n- `wall_time` - CPU Hours: Total\n- `cpu_time_user` - CPU Hours: User: Total\n- `avg_percent_cpu_user` - Avg CPU %: User: weighted by core-hour\n- `avg_flops_per_core` - Avg: FLOPS: Per Core weighted by core-hour\n- `avg_memory_per_core` - Avg: Memory: Per Core weighted by core-hour\n- `avg_ib_rx_bytes` - Avg: InfiniBand rate: Per Node weighted by node-hour\n\n**üí° For GPU metrics, always use the SUPREMM realm!**\n\n## Authentication \n\nThe server supports optional API token authentication for enhanced debugging and troubleshooting. The current release focuses on system-wide public metrics data from XDMoD.\n\n## Practical Workflows\n\n### üìä **Monthly Reporting Workflow**\n\n1. \"What dimensions are available?\" ‚Üí Choose your metric category\n2. \"Show me statistics for Jobs dimension\" ‚Üí Pick relevant metrics\n3. \"Generate a chart of total CPU hours for last month\" ‚Üí Get visual\n4. \"Give me the link to view this in XDMoD\" ‚Üí Share with team\n\n### üîç **Performance Investigation**\n\n1. \"Get me job count data for the past week\"\n2. \"Show me average wait times for the same period\"\n3. \"Create a comparison chart of wait times vs job counts\"\n4. \"What's the correlation between usage and wait times?\"\n\n### üìà **Capacity Planning**\n\n1. \"Show CPU usage trends for the last 6 months\"\n2. \"What are the peak usage periods?\"\n3. \"Generate high-resolution charts for presentation\"\n4. \"Export data for further analysis\"\n\n### üî¨ **Research Impact Analysis**\n\n1. \"Analyze Dr. Johnson's computational usage with NSF funding context\"\n2. \"Compare funding efficiency across different research groups\"\n3. \"Generate institutional research profile with funding correlations\"\n4. \"Identify usage patterns that correlate with successful funding outcomes\"\n\n## Date Formats and Ranges\n\nAll date parameters must be in `YYYY-MM-DD` format:\n\n- `2024-01-01` - January 1st, 2024\n- `2024-12-31` - December 31st, 2024\n\n**Common Date Ranges**:\n\n- Last Month: Use first and last day of previous month\n- Quarter: Q1 = Jan 1 - Mar 31, Q2 = Apr 1 - Jun 30, etc.\n- Year to Date: Jan 1 to today's date\n- Custom Period: Any start and end date you need\n\n## Tips and Best Practices\n\n### üéØ **Getting Started**\n\n1. Always start by exploring available dimensions\n2. Check what statistics are available for your chosen dimension\n3. Use descriptive natural language - Claude will map it to the right tools\n\n### üìä **Working with Data**\n\n- Request data first to understand the structure\n- Then generate visualizations based on what you find\n- Use chart links to share interactive views with colleagues\n\n### üñºÔ∏è **Chart Formats**\n\n- **SVG**: Best for web display and scaling\n- **PNG**: Best for presentations and documents\n- **PDF**: Best for archival and printing\n\n### üîÑ **Efficient Workflows**\n\n- Save frequently used date ranges\n- Bookmark generated portal links\n- Export data for longitudinal analysis\n\n## Authentication\n\n### **Public Access (Default)**\nBy default, this server uses public access to XDMoD APIs and provides general usage statistics and metrics.\n\n### **Authenticated Access (Personal Data)**\nFor access to personal usage data like \"show me my credit usage in the last 3 months\", you can set up authentication using an XDMoD API token.\n\n#### **Setting Up Authentication:**\n\n1. **Generate API Token:**\n   - Sign in to [XDMoD portal](https://xdmod.access-ci.org/)\n   - Click \"My Profile\" button (top-right corner)\n   - Click \"API Token\" tab\n   - Copy your token (save it securely - you won't see it again!)\n\n2. **Configure Authentication (Choose One):**\n\n   **Option A: Environment Variable**\n   ```bash\n   export XDMOD_API_TOKEN=\"your-token-here\"\n   npm start\n   ```\n\n   **Option B: Claude Desktop Config** *(Recommended)*\n   ```json\n   {\n     \"mcpServers\": {\n       \"xdmod-metrics\": {\n         \"command\": \"node\",\n         \"args\": [\n           \"/path/to/access_mcp/packages/xdmod-metrics/dist/index.js\",\n           \"--api-token\",\n           \"your-token-here\"\n         ]\n       }\n     }\n   }\n   ```\n\n3. **Test Authentication:**\n   Ask Claude: *\"Debug my XDMoD authentication status\"* to verify setup\n\n#### **Authentication Features:**\nWhen authenticated, you get enhanced debugging capabilities:\n\n- `debug_auth_status` - Comprehensive authentication status and troubleshooting\n\n#### **Example Authentication Queries:**\n- \"Debug my XDMoD authentication status\"\n- \"Check if my API token is working\"\n- \"Help me troubleshoot authentication issues\"\n\n**Note:** Personal usage data features are in development. The current release focuses on system-wide public metrics.\n\n## Data Source\n\nAll data is sourced from the ACCESS-CI XDMoD portal at https://xdmod.access-ci.org/\n\n## Usage\n\n```bash\n# Install and build\nnpm install\nnpm run build\n\n# Start the server\nnpm start\n```\n\nThe server runs on stdio transport and can be integrated with MCP-compatible clients.\n",
    "main": "dist/index.js",
    "bin": {
      "access-xdmod-metrics": "dist/index.js"
    }
  },
  {
    "id": "allocations",
    "name": "@access-mcp/allocations",
    "version": "0.3.0",
    "description": "MCP server for ACCESS-CI Allocations and Research Projects API",
    "readme": "# Allocations MCP Server\n\nMCP server providing access to ACCESS-CI allocations and research projects data with NSF Awards integration.\n\n## Overview\n\nThis server provides comprehensive access to active research projects and allocations across the ACCESS-CI ecosystem, enabling project discovery, collaboration opportunities, and resource allocation analysis. Enhanced with NSF Awards data for complete research funding context.\n\n## Tools\n\n### search_projects\n\nSearch ACCESS-CI research projects by keyword, PI name, or institution.\n\n**Parameters:**\n\n- `query` (string): Search query for project titles, abstracts, PI names, or institutions\n- `field_of_science` (string, optional): Filter by field of science\n- `allocation_type` (string, optional): Filter by allocation type\n- `limit` (number, optional): Maximum number of results to return (default: 20)\n\n### get_project_details\n\nGet detailed information about a specific research project.\n\n**Parameters:**\n\n- `project_id` (number): The project ID number\n\n### list_projects_by_field\n\nList projects by field of science.\n\n**Parameters:**\n\n- `field_of_science` (string): Field of science to filter by\n- `limit` (number, optional): Maximum number of results to return (default: 20)\n\n### list_projects_by_resource\n\nFind projects using specific computational resources.\n\n**Parameters:**\n\n- `resource_name` (string): Resource name to search for\n- `limit` (number, optional): Maximum number of results to return (default: 20)\n\n### get_allocation_statistics\n\nGet statistics about resource allocations and research trends.\n\n**Parameters:**\n\n- `pages_to_analyze` (number, optional): Number of pages to analyze for statistics (default: 5, max: 20)\n\n### find_similar_projects\n\nFind projects with similar research focus or abstracts.\n\n**Parameters:**\n\n- `project_id` (number, optional): Reference project ID to find similar projects\n- `keywords` (string, optional): Keywords to find similar projects\n- `limit` (number, optional): Maximum number of similar projects to return (default: 10)\n\n### get_nsf_award\n\nGet NSF award details for a specific award number.\n\n**Parameters:**\n\n- `award_number` (string): NSF award number (e.g., '2138259')\n\n### enrich_project_with_nsf\n\nEnrich an ACCESS project with NSF award data by searching for matching PI and institution.\n\n**Parameters:**\n\n- `project_id` (number): ACCESS project ID to enrich with NSF data\n\n### find_nsf_awards_by_pi\n\nFind NSF awards for a specific Principal Investigator.\n\n**Parameters:**\n\n- `pi_name` (string): Principal Investigator name to search for\n- `limit` (number, optional): Maximum number of awards to return (default: 10)\n\n### find_nsf_awards_by_personnel\n\nSearch NSF awards by Principal Investigator name. \n\n**Note:** Co-PI and Program Officer searches are not reliable in the NSF API and have been removed.\n\n**Parameters:**\n\n- `person_name` (string): Principal Investigator name to search for\n- `limit` (number, optional): Maximum number of awards to return (default: 10)\n\n## Resources\n\n- `accessci://allocations`: ACCESS-CI Research Projects and Allocations data\n\n## Installation\n\n```bash\nnpm install -g @access-mcp/allocations\n```\n\n## Configuration\n\nAdd to your Claude Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"access-allocations\": {\n      \"command\": \"npx\",\n      \"args\": [\"@access-mcp/allocations\"]\n    }\n  }\n}\n```\n\n## Usage Examples\n\n### üî¨ **Discover Research Projects**\n\n- \"Find projects in computational biology\"\n- \"What research is being done on climate modeling?\"\n- \"Show me projects using machine learning\"\n\n### üë• **Find Collaborations**\n\n- \"Who is working on quantum computing research?\"\n- \"Find projects at MIT using GPU resources\"\n- \"Show me similar projects to TG-BIO210042\"\n\n### üí∞ **Analyze Allocations**\n\n- \"What's the total allocation for genomics research?\"\n- \"Show allocation statistics across different fields\"\n- \"Which resources are most used for AI research?\"\n\n### üèõÔ∏è **NSF Award Integration**\n\n- \"Find NSF award details for project 2138259\"\n- \"Show me all NSF awards for Stephen Deems\"\n- \"Enrich this ACCESS project with NSF funding data\"\n\n## Detailed Usage Examples\n\n### Searching Research Projects\n\n**Natural Language**: \"Find active projects in machine learning\"\n\n**Tool Call**:\n```typescript\nconst projects = await search_projects({\n  query: \"machine learning\",\n  limit: 10\n});\n```\n\n**Returns**: List of projects with:\n- Project titles and abstracts\n- Principal Investigator information\n- Institution details\n- Resource allocations (in ACCESS Credits or compute hours)\n- Grant numbers\n\n### Getting Project Details\n\n**Natural Language**: \"Tell me about project TG-BIO210042\"\n\n**Tool Call**:\n```typescript\nconst details = await get_project_details({\n  project_id: \"TG-BIO210042\"\n});\n```\n\n**Returns**: Comprehensive project information:\n- Full abstract and research goals\n- PI and Co-PI details\n- Allocated resources and usage\n- Start/end dates\n- Publications and outcomes\n\n### Finding Similar Research\n\n**Natural Language**: \"Find projects similar to this genomics project\"\n\n**Tool Call**:\n```typescript\nconst similar = await find_similar_projects({\n  project_id: \"TG-BIO210042\",\n  limit: 5\n});\n```\n\n**Returns**: Related projects based on:\n- Research domain overlap\n- Methodology similarities\n- Resource usage patterns\n- Institutional connections\n\n### Analyzing Resource Allocations\n\n**Natural Language**: \"Show me allocation statistics for computational chemistry\"\n\n**Tool Call**:\n```typescript\nconst stats = await get_allocation_statistics({\n  pages_to_analyze: 10\n});\n```\n\n**Returns**: Statistical analysis including:\n- Total ACCESS Credits allocated\n- Distribution by field of science\n- Top institutions and PIs\n- Resource utilization trends\n- Average allocation sizes\n\n### NSF Award Lookup\n\n**Natural Language**: \"Get details for NSF award 2138259\"\n\n**Tool Call**:\n```typescript\nconst award = await get_nsf_award({\n  award_number: \"2138259\"\n});\n```\n\n**Returns**: NSF award information:\n- Award title and abstract\n- Principal Investigator\n- Award amount\n- Start and end dates\n- Program officer\n- Funded institution\n\n### Finding NSF Awards by PI\n\n**Natural Language**: \"Show me NSF awards for Shelley Knuth\"\n\n**Tool Call**:\n```typescript\nconst awards = await find_nsf_awards_by_pi({\n  pi_name: \"Shelley Knuth\",\n  limit: 10\n});\n```\n\n**Returns**: List of NSF awards including:\n- Award numbers and titles\n- Funding amounts\n- Award dates\n- Institutions\n- Co-PIs (when available)\n\n## API Endpoints\n\nThis server connects to:\n- ACCESS-CI Allocations portal at `https://allocations.access-ci.org`\n- NSF Awards Search at `https://www.nsf.gov/awardsearch/`\n\n**Important Note:** ACCESS Credits are computational resource credits, NOT monetary currency.\n\n## License\n\nMIT",
    "main": "dist/index.js",
    "bin": {
      "access-allocations": "dist/index.js"
    }
  }
];

export function getServerById(id) {
  return servers.find(server => server.id === id);
}

export function getActiveServers() {
  return servers.filter(server => server.status !== 'planned');
}
