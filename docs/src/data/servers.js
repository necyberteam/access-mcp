export const servers = [
  {
    id: "affinity-groups",
    name: "@access-mcp/affinity-groups",
    version: "0.2.3",
    description: "MCP server for ACCESS-CI Affinity Groups API",
    readme:
      '# ACCESS-CI Affinity Groups MCP Server\n\nMCP server providing access to ACCESS-CI Affinity Groups API endpoints.\n\n## API Endpoints Covered\n\n- **Affinity Groups**: `/api/1.0/affinity_groups/{group_id}`\n- **Events & Trainings**: `/api/1.1/events/ag/{group_id}`\n- **Knowledge Base**: `/api/1.0/kb/{group_id}`\n\n## Tools\n\n### get_affinity_group\nGet basic information about a specific affinity group.\n\n**Parameters:**\n- `group_id` (string): The affinity group identifier (e.g., "bridges2.psc.access-ci.org")\n\n### get_affinity_group_events\nGet events and trainings for a specific affinity group.\n\n**Parameters:**\n- `group_id` (string): The affinity group identifier\n\n### get_affinity_group_kb\nGet knowledge base resources for a specific affinity group.\n\n**Parameters:**\n- `group_id` (string): The affinity group identifier\n\n## Usage\n\n```bash\n# Install and build\nnpm install\nnpm run build\n\n# Start the server\nnpm start\n```\n\nThe server runs on stdio transport and can be integrated with MCP-compatible clients.',
    main: "dist/index.js",
    bin: {
      "access-mcp-affinity-groups": "dist/index.js",
    },
  },
  {
    id: "compute-resources",
    name: "@access-mcp/compute-resources",
    version: "0.2.3",
    description: "MCP server for ACCESS-CI Compute Resources API",
    readme:
      '# ACCESS-CI Compute Resources MCP Server\n\nMCP server providing access to ACCESS-CI compute resources information.\n\n## Overview\n\nThis server provides comprehensive information about compute resources available through ACCESS-CI, including hardware specifications, resource status, and detailed configurations.\n\n## Tools\n\n### list_compute_resources\nList all available ACCESS-CI compute resources.\n\n**Parameters:** None\n\n### get_compute_resource\nGet detailed information about a specific compute resource.\n\n**Parameters:**\n- `resource_id` (string): The resource ID or info_groupid (e.g., "expanse.sdsc.xsede.org")\n\n### get_resource_hardware\nGet hardware specifications for a compute resource.\n\n**Parameters:**\n- `resource_id` (string): The resource ID or info_groupid\n\n## Resources\n\n- `accessci://compute-resources`: Comprehensive information about all compute resources\n\n## Installation\n\n```bash\nnpm install -g @access-mcp/compute-resources\n```\n\n## Usage\n\nAdd to your Claude Desktop configuration:\n\n```json\n{\n  "mcpServers": {\n    "access-compute-resources": {\n      "command": "access-mcp-compute-resources"\n    }\n  }\n}\n```\n\n## API Endpoints\n\nThis server connects to the ACCESS-CI Operations API at `https://operations-api.access-ci.org`\n\n## License\n\nMIT',
    main: "dist/index.js",
    bin: {
      "access-mcp-compute-resources": "dist/index.js",
    },
  },
  {
    id: "system-status",
    name: "@access-mcp/system-status",
    version: "0.2.3",
    description: "MCP server for ACCESS-CI System Status and Outages API",
    readme:
      '# ACCESS-CI System Status MCP Server\n\nMCP server providing real-time system status information for ACCESS-CI resources.\n\n## Overview\n\nThis server provides critical operational information about ACCESS-CI systems, including current outages, scheduled maintenance, and system-wide announcements.\n\n## Tools\n\n### get_current_outages\nGet current system outages and issues affecting ACCESS-CI resources.\n\n**Parameters:**\n- `resource_filter` (string, optional): Filter by specific resource name or ID\n\n### get_scheduled_maintenance\nGet scheduled maintenance and future outages for ACCESS-CI resources.\n\n**Parameters:**\n- `resource_filter` (string, optional): Filter by specific resource name or ID\n\n### get_system_announcements\nGet all system announcements (current and scheduled).\n\n**Parameters:**\n- `limit` (number, optional): Maximum number of announcements to return (default: 50)\n\n### get_resource_status\nGet the current operational status of a specific resource.\n\n**Parameters:**\n- `resource_id` (string): The resource ID to check status for\n\n## Resources\n\n- `accessci://system-status`: Current operational status of all ACCESS-CI resources\n\n## Installation\n\n```bash\nnpm install -g @access-mcp/system-status\n```\n\n## Usage\n\nAdd to your Claude Desktop configuration:\n\n```json\n{\n  "mcpServers": {\n    "access-system-status": {\n      "command": "access-mcp-system-status"\n    }\n  }\n}\n```\n\n## API Endpoints\n\nThis server connects to the ACCESS-CI Operations API at `https://operations-api.access-ci.org`\n\n## License\n\nMIT',
    main: "dist/index.js",
    bin: {
      "access-mcp-system-status": "dist/index.js",
    },
  },
  {
    id: "software-discovery",
    name: "@access-mcp/software-discovery",
    version: "0.2.3",
    description: "ACCESS-CI Software Discovery Service MCP server",
    readme:
      '# ACCESS-CI Software Discovery MCP Server\n\nMCP server providing software discovery and search capabilities for ACCESS-CI resources.\n\n## Overview\n\nThis server enables searching and discovering software packages available across ACCESS-CI compute resources using the Software Discovery Service (SDS) API.\n\n## Tools\n\n### search_software\nSearch for software packages across ACCESS-CI resources.\n\n**Parameters:**\n- `query` (string): Search query for software names or descriptions\n- `resource_filter` (string, optional): Filter results by specific resource ID\n\n### list_software_by_resource\nList all available software packages for a specific ACCESS-CI resource.\n\n**Parameters:**\n- `resource_id` (string): The resource ID (e.g., "expanse.sdsc.xsede.org")\n- `limit` (number, optional): Maximum number of results (default: 100)\n\n### get_software_details\nGet detailed information about a specific software package on a resource.\n\n**Parameters:**\n- `software_name` (string): Name of the software package\n- `resource_id` (string): The resource ID where the software is installed\n\n### search_software_by_category\nSearch for software packages by category or domain.\n\n**Parameters:**\n- `category` (string): Software category (e.g., "bioinformatics", "chemistry", "physics")\n- `resource_filter` (string, optional): Filter by specific resource\n\n## Resources\n\n- `accessci://software-catalog`: Comprehensive catalog of available software across all resources\n\n## Installation\n\n```bash\nnpm install -g @access-mcp/software-discovery\n```\n\n## Usage\n\nAdd to your Claude Desktop configuration:\n\n```json\n{\n  "mcpServers": {\n    "access-software-discovery": {\n      "command": "access-mcp-software-discovery",\n      "env": {\n        "SDS_API_KEY": "your-api-key-here"\n      }\n    }\n  }\n}\n```\n\n## Environment Variables\n\n- `SDS_API_KEY`: API key for the Software Discovery Service (required)\n\n## API Endpoints\n\nThis server connects to the ACCESS-CI Software Discovery Service at `https://ara-db.ccs.uky.edu`\n\n## License\n\nMIT',
    main: "dist/index.js",
    bin: {
      "access-mcp-software-discovery": "dist/index.js",
    },
  },
  {
    id: "xdmod-metrics",
    name: "@access-mcp/xdmod-metrics",
    version: "0.3.0",
    description: "MCP server for XDMoD Metrics and Usage Analytics API",
    readme:
      '# ACCESS-CI XDMoD Metrics MCP Server\n\nMCP server providing access to XDMoD (XD Metrics on Demand) Usage Analytics API endpoints for ACCESS-CI infrastructure metrics and statistics.\n\n## API Endpoints Covered\n\n- **Dimensions**: `/controllers/user_interface.php` - Get all available dimensions from Usage Tab\n- **Statistics**: `/controllers/user_interface.php` - Get available statistics for each dimension  \n- **Chart Data**: `/controllers/user_interface.php` - Get raw chart data and metadata\n- **Chart Images**: `/controllers/user_interface.php` - Get chart images in SVG, PNG, or PDF format\n- **Chart Links**: Generate direct links to XDMoD portal charts\n- **Debug Tools**: Authentication status and troubleshooting utilities\n\n## Tools\n\n### get_dimensions\nGet all available dimensions from the XDMoD Usage Tab.\n\n**Parameters:** None\n\n**Returns:** List of all dimensions with their IDs, categories, and group-by fields.\n\n### get_statistics\nGet available statistics for a specific dimension.\n\n**Parameters:**\n- `dimension_id` (string): The dimension ID (e.g., "Jobs_none")\n- `category` (string): The realm/category (e.g., "Jobs") \n- `group_by` (string): The group by field (e.g., "none")\n\n**Returns:** List of statistics available for the specified dimension.\n\n### get_chart_data\nGet chart data and metadata for a specific statistic.\n\n**Parameters:**\n- `realm` (string): The realm (e.g., "Jobs")\n- `group_by` (string): The group by field (e.g., "none")\n- `statistic` (string): The statistic name (e.g., "total_cpu_hours")\n- `start_date` (string): Start date in YYYY-MM-DD format\n- `end_date` (string): End date in YYYY-MM-DD format\n- `dataset_type` (string, optional): Dataset type (default: "timeseries")\n\n**Returns:** Raw chart data including descriptions and metadata.\n\n### get_chart_image\nGet chart image (SVG, PNG, or PDF) for a specific statistic.\n\n**Parameters:**\n- `realm` (string): The realm (e.g., "Jobs")\n- `group_by` (string): The group by field (e.g., "none") \n- `statistic` (string): The statistic name (e.g., "total_cpu_hours")\n- `start_date` (string): Start date in YYYY-MM-DD format\n- `end_date` (string): End date in YYYY-MM-DD format\n- `format` (string, optional): Image format - "svg", "png", or "pdf" (default: "svg")\n- `width` (number, optional): Image width in pixels (default: 916)\n- `height` (number, optional): Image height in pixels (default: 484)\n- `dataset_type` (string, optional): Dataset type (default: "timeseries")\n\n**Returns:** Chart image data in the requested format.\n\n### get_chart_link\nGenerate a direct link to view the chart in the XDMoD portal.\n\n**Parameters:**\n- `statistic_id` (string): The statistic ID from the dimensions/statistics API\n\n**Returns:** Direct URL to view the interactive chart in XDMoD.\n\n## Quick Start with Claude Desktop\n\nAfter adding this server to your Claude Desktop configuration, you can ask natural language questions like:\n\n### 🔍 **Explore Available Metrics**\n- "What dimensions are available in XDMoD?"\n- "Show me all statistics for the Jobs dimension"\n- "What metrics can I track for Cloud resources?"\n\n### 📊 **Get Usage Data**\n- "Show me total CPU hours for January 2024"\n- "What was the job count last month?"\n- "Get me the average wait time data for Q1 2024"\n\n### 📈 **Generate Charts**\n- "Create an SVG chart of CPU hours for the last 30 days"\n- "Generate a high-resolution PNG chart of job counts for March 2024"\n- "Show me a PDF chart of resource utilization trends"\n\n### 🔗 **Portal Integration**\n- "Give me a direct link to the CPU hours chart in XDMoD"\n- "How can I view this data interactively in the portal?"\n\n## Detailed Usage Examples\n\n### Getting Available Dimensions\n**Natural Language**: "What metrics are available in XDMoD?"\n\n**Tool Call**:\n```typescript\nconst dimensions = await get_dimensions();\n```\n\n**Returns**: List of dimensions like Jobs, Cloud, Storage, GPU, etc.\n\n### Getting Statistics for a Dimension\n**Natural Language**: "Show me what statistics I can get for Jobs"\n\n**Tool Call**:\n```typescript\nconst statistics = await get_statistics({\n  dimension_id: "Jobs_none",\n  category: "Jobs", \n  group_by: "none"\n});\n```\n\n**Returns**: Metrics like total_cpu_hours, job_count, avg_cpu_hours, wait_time, etc.\n\n### Getting Chart Data\n**Natural Language**: "Get me CPU hours data for January 2024"\n\n**Tool Call**:\n```typescript\nconst chartData = await get_chart_data({\n  realm: "Jobs",\n  group_by: "none",\n  statistic: "total_cpu_hours",\n  start_date: "2024-01-01",\n  end_date: "2024-01-31"\n});\n```\n\n**Returns**: Raw data with chart descriptions and metadata\n\n### Getting Chart Images\n**Natural Language**: "Create a chart showing CPU usage trends for Q1 2024"\n\n**Tool Call**:\n```typescript\n// SVG format (default)\nconst svgChart = await get_chart_image({\n  realm: "Jobs",\n  group_by: "none", \n  statistic: "total_cpu_hours",\n  start_date: "2024-01-01",\n  end_date: "2024-03-31",\n  format: "svg"\n});\n\n// High-resolution PNG\nconst pngChart = await get_chart_image({\n  realm: "Jobs",\n  group_by: "none",\n  statistic: "total_cpu_hours", \n  start_date: "2024-01-01",\n  end_date: "2024-03-31",\n  format: "png",\n  width: 1920,\n  height: 1080\n});\n```\n\n### Getting Chart Links\n**Natural Language**: "Give me a link to view this chart in XDMoD"\n\n**Tool Call**:\n```typescript\nconst chartLink = await get_chart_link({\n  statistic_id: "Jobs_none_total_cpu_hours"\n});\n```\n\n**Returns**: Direct URL like: `https://xdmod.access-ci.org/index.php#tg_usage?node=Jobs_none_total_cpu_hours`\n\n## Common Statistics\n\nPopular statistics available in the Jobs realm:\n- `total_cpu_hours` - Total CPU Hours\n- `job_count` - Number of Jobs\n- `avg_cpu_hours` - Average CPU Hours per Job\n- `total_waitduration_hours` - Total Wait Duration Hours\n- `avg_waitduration_hours` - Average Wait Duration Hours\n- `max_processors` - Maximum Processor Count\n- `normalized_avg_processors` - Normalized Average Processors\n- `min_processors` - Minimum Processor Count\n\n## Practical Workflows\n\n### 📊 **Monthly Reporting Workflow**\n1. "What dimensions are available?" → Choose your metric category\n2. "Show me statistics for Jobs dimension" → Pick relevant metrics\n3. "Generate a chart of total CPU hours for last month" → Get visual\n4. "Give me the link to view this in XDMoD" → Share with team\n\n### 🔍 **Performance Investigation**\n1. "Get me job count data for the past week"\n2. "Show me average wait times for the same period"\n3. "Create a comparison chart of wait times vs job counts"\n4. "What\'s the correlation between usage and wait times?"\n\n### 📈 **Capacity Planning**\n1. "Show CPU usage trends for the last 6 months"\n2. "What are the peak usage periods?"\n3. "Generate high-resolution charts for presentation"\n4. "Export data for further analysis"\n\n## Date Formats and Ranges\n\nAll date parameters must be in `YYYY-MM-DD` format:\n- `2024-01-01` - January 1st, 2024\n- `2024-12-31` - December 31st, 2024\n\n**Common Date Ranges**:\n- Last Month: Use first and last day of previous month\n- Quarter: Q1 = Jan 1 - Mar 31, Q2 = Apr 1 - Jun 30, etc.\n- Year to Date: Jan 1 to today\'s date\n- Custom Period: Any start and end date you need\n\n## Tips and Best Practices\n\n### 🎯 **Getting Started**\n1. Always start by exploring available dimensions\n2. Check what statistics are available for your chosen dimension\n3. Use descriptive natural language - Claude will map it to the right tools\n\n### 📊 **Working with Data**\n- Request data first to understand the structure\n- Then generate visualizations based on what you find\n- Use chart links to share interactive views with colleagues\n\n### 🖼️ **Chart Formats**\n- **SVG**: Best for web display and scaling\n- **PNG**: Best for presentations and documents\n- **PDF**: Best for archival and printing\n\n### 🔄 **Efficient Workflows**\n- Save frequently used date ranges\n- Bookmark generated portal links\n- Export data for longitudinal analysis\n\n## Authentication\n\nThis server uses public access to XDMoD APIs and does not require authentication. For authenticated access to additional data, authentication can be added in future versions.\n\n## Data Source\n\nAll data is sourced from the ACCESS-CI XDMoD portal at https://xdmod.access-ci.org/\n\n## Usage\n\n```bash\n# Install and build\nnpm install\nnpm run build\n\n# Start the server\nnpm start\n```\n\nThe server runs on stdio transport and can be integrated with MCP-compatible clients.',
    main: "dist/index.js",
    bin: {
      "access-xdmod-metrics": "dist/index.js",
    },
  },
];

export function getServerById(id) {
  return servers.find((server) => server.id === id);
}

export function getActiveServers() {
  return servers.filter((server) => server.status !== "planned");
}
