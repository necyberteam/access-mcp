export const servers = [
  {
    "id": "affinity-groups",
    "name": "@access-mcp/affinity-groups",
    "version": "0.3.0",
    "description": "MCP server for ACCESS-CI Affinity Groups API",
    "main": "dist/index.js",
    "bin": {
      "access-mcp-affinity-groups": "dist/index.js"
    },
    "readme": "# Affinity Groups MCP Server\n\nMCP server providing access to ACCESS-CI Affinity Groups API endpoints. Access community resources, events and trainings, and knowledge base content for affinity groups across the ACCESS-CI ecosystem.\n\n## Usage Examples\n\n### **Discover Community Resources**\n\n```\n\"What affinity groups are available for machine learning?\"\n\"Show me information about the GPU computing affinity group\"\n\"Find affinity groups related to bioinformatics\"\n```\n\n### **Find Events and Trainings**\n\n```\n\"What upcoming events are there for the bridges2.psc.access-ci.org group?\"\n\"Show me training opportunities for GPU computing\"\n\"Find workshops about parallel computing\"\n```\n\n### **Access Knowledge Base**\n\n```\n\"Get knowledge base resources for quantum computing\"\n\"What documentation is available for the Anvil cluster?\"\n\"Find tutorials for the Delta GPU system\"\n```\n\n## Tools\n\n### get_affinity_group\n\nGet basic information about a specific affinity group.\n\n**Parameters:**\n\n- `group_id` (string): The affinity group identifier (e.g., \"bridges2.psc.access-ci.org\")\n\n### get_affinity_group_events\n\nGet events and trainings for a specific affinity group.\n\n**Parameters:**\n\n- `group_id` (string): The affinity group identifier\n\n### get_affinity_group_kb\n\nGet knowledge base resources for a specific affinity group.\n\n**Parameters:**\n\n- `group_id` (string): The affinity group identifier\n\n## Installation\n\n```bash\nnpm install -g @access-mcp/affinity-groups\n```\n\n## Configuration\n\nAdd to your Claude Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"access-affinity-groups\": {\n      \"command\": \"npx\",\n      \"args\": [\"@access-mcp/affinity-groups\"]\n    }\n  }\n}\n```\n\n\n## Detailed Usage Examples\n\n### Getting Affinity Group Information\n\n**Natural Language**: \"Tell me about the Bridges-2 affinity group\"\n\n**Tool Call**:\n\n```typescript\nconst groupInfo = await get_affinity_group({\n  group_id: \"bridges2.psc.access-ci.org\",\n});\n```\n\n**Returns**: Group details including description, members, resources, and contact information.\n\n### Finding Events and Trainings\n\n**Natural Language**: \"What events are coming up for GPU computing?\"\n\n**Tool Call**:\n\n```typescript\nconst events = await get_affinity_group_events({\n  group_id: \"gpu-computing.access-ci.org\",\n});\n```\n\n**Returns**: List of upcoming workshops, training sessions, and community events.\n\n### Accessing Knowledge Base Resources\n\n**Natural Language**: \"Find documentation for the Delta system\"\n\n**Tool Call**:\n\n```typescript\nconst resources = await get_affinity_group_kb({\n  group_id: \"delta.ncsa.access-ci.org\",\n});\n```\n\n**Returns**: Documentation, tutorials, best practices, and user guides.\n"
  },
  {
    "id": "compute-resources",
    "name": "@access-mcp/compute-resources",
    "version": "0.3.0",
    "description": "MCP server for ACCESS-CI Compute Resources API",
    "main": "dist/index.js",
    "bin": {
      "access-mcp-compute-resources": "dist/index.js"
    },
    "readme": "# Compute Resources MCP Server\n\nMCP server providing access to ACCESS-CI compute resources information including hardware specifications, resource status, and detailed configurations. Get comprehensive information about supercomputers, clusters, and their technical capabilities.\n\n## Usage Examples\n\n### **Discover Resources**\n\n```\n\"What compute resources are available on ACCESS-CI?\"\n\"List all available supercomputers and clusters\"\n\"Show me information about high-performance computing resources\"\n```\n\n### **Get Resource Details**\n\n```\n\"Tell me about the Expanse supercomputer\"\n\"What are the specifications of Delta?\"\n\"Show me details about Bridges-2\"\n```\n\n### **Hardware Specifications**\n\n```\n\"What are the hardware specs for Anvil?\"\n\"How many GPUs does Delta have?\"\n\"What's the memory configuration on Frontera?\"\n```\n\n## Tools\n\n### list_compute_resources\n\nList all available ACCESS-CI compute resources.\n\n**Parameters:** None\n\n### get_compute_resource\n\nGet detailed information about a specific compute resource.\n\n**Parameters:**\n\n- `resource_id` (string): The resource ID or info_groupid (e.g., \"expanse.sdsc.xsede.org\")\n\n### get_resource_hardware\n\nGet hardware specifications for a compute resource.\n\n**Parameters:**\n\n- `resource_id` (string): The resource ID or info_groupid\n\n## Resources\n\n- `accessci://compute-resources`: Comprehensive information about all compute resources\n\n## Installation\n\n```bash\nnpm install -g @access-mcp/compute-resources\n```\n\n## Configuration\n\nAdd to your Claude Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"access-compute-resources\": {\n      \"command\": \"npx\",\n      \"args\": [\"@access-mcp/compute-resources\"]\n    }\n  }\n}\n```\n\n## Usage Examples\n\n### üñ•Ô∏è **Discover Available Resources**\n\n- \"What compute resources are available on ACCESS-CI?\"\n- \"Show me all GPU-enabled systems\"\n- \"Which systems have the most CPU cores?\"\n\n### üîç **Get Resource Details**\n\n- \"Tell me about the Expanse cluster at SDSC\"\n- \"What are the specifications of the Delta system?\"\n- \"Show me details about Bridges-2 at PSC\"\n\n### üíª **Hardware Specifications**\n\n- \"What GPUs are available on Delta?\"\n- \"How much memory does Anvil have per node?\"\n- \"What's the interconnect on Frontera?\"\n\n## Detailed Usage Examples\n\n### Listing All Compute Resources\n\n**Natural Language**: \"Show me all available ACCESS-CI compute resources\"\n\n**Tool Call**:\n\n```typescript\nconst resources = await list_compute_resources();\n```\n\n**Returns**: Complete list of all compute resources with names, organizations, and basic specs.\n\n### Getting Detailed Resource Information\n\n**Natural Language**: \"Tell me everything about the Expanse cluster\"\n\n**Tool Call**:\n\n```typescript\nconst details = await get_compute_resource({\n  resource_id: \"expanse.sdsc.xsede.org\",\n});\n```\n\n**Returns**: Comprehensive information including:\n\n- System architecture and configuration\n- Node types and counts\n- Storage systems\n- Software environment\n- Access methods\n- Support information\n\n### Querying Hardware Specifications\n\n**Natural Language**: \"What hardware does Delta have?\"\n\n**Tool Call**:\n\n```typescript\nconst hardware = await get_resource_hardware({\n  resource_id: \"delta.ncsa.xsede.org\",\n});\n```\n\n**Returns**: Detailed hardware specifications:\n\n- CPU models and core counts\n- GPU models and configurations\n- Memory per node\n- Interconnect technology\n- Storage specifications\n\n## API Endpoints\n\nThis server connects to the ACCESS-CI Operations API at `https://operations-api.access-ci.org`\n\n## License\n\nMIT\n"
  },
  {
    "id": "system-status",
    "name": "@access-mcp/system-status",
    "version": "0.4.0",
    "description": "MCP server for ACCESS-CI System Status and Outages API",
    "main": "dist/index.js",
    "bin": {
      "access-mcp-system-status": "dist/index.js"
    },
    "readme": "# System Status MCP Server\n\nMCP server providing real-time system status information for ACCESS-CI resources. Provides critical operational information about ACCESS-CI systems, including current outages, scheduled maintenance, and system-wide announcements.\n\n## Usage Examples\n\n### **Monitor Current Issues**\n\n```\n\"Are there any current outages on ACCESS-CI?\"\n\"Is Delta currently operational?\"\n\"What systems are experiencing issues right now?\"\n\"Show me all systems that are down\"\n```\n\n### **Track Maintenance Windows**\n\n```\n\"When is the next maintenance for Expanse?\"\n\"Show me all scheduled maintenance for this week\"\n\"Is there upcoming maintenance on Bridges-2?\"\n\"What maintenance is planned for GPU systems?\"\n```\n\n### **System Announcements**\n\n```\n\"What are the latest system announcements?\"\n\"Are there any important notices for ACCESS users?\"\n\"Show me recent updates about system changes\"\n\"Any policy updates I should know about?\"\n```\n\n### **Check Resource Status**\n\n```\n\"What's the current status of Anvil?\"\n\"Is Frontera available for job submission?\"\n\"Check if all GPU systems are operational\"\n\"Get status for all TACC resources\"\n```\n\n## Tools\n\n### get_current_outages\n\nGet current system outages and issues affecting ACCESS-CI resources.\n\n**Parameters:**\n\n- `resource_filter` (string, optional): Filter by specific resource name or ID\n\n**Example:**\n```typescript\n// User: \"Are there any current outages on Delta?\"\nconst outages = await get_current_outages({\n  resource_filter: \"delta\"\n});\n```\n\n### get_scheduled_maintenance\n\nGet scheduled maintenance and future outages for ACCESS-CI resources.\n\n**Parameters:**\n\n- `resource_filter` (string, optional): Filter by specific resource name or ID\n\n### get_system_announcements\n\nGet all system announcements (current and scheduled).\n\n**Parameters:**\n\n- `limit` (number, optional): Maximum number of announcements to return (default: 50)\n\n### get_resource_status\n\nGet the current operational status of a specific resource.\n\n**Parameters:**\n\n- `resource_id` (string): The resource ID to check status for\n\n## Resources\n\n- `accessci://system-status`: Current operational status of all ACCESS-CI resources\n\n## Installation\n\n```bash\nnpm install -g @access-mcp/system-status\n```\n\n## Configuration\n\nAdd to your Claude Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"access-system-status\": {\n      \"command\": \"npx\",\n      \"args\": [\"@access-mcp/system-status\"]\n    }\n  }\n}\n```\n\n## Usage Examples\n\n### üö® **Monitor Current Issues**\n\n- \"Are there any current outages on ACCESS-CI?\"\n- \"Is Delta currently operational?\"\n- \"What systems are experiencing issues right now?\"\n\n### üîß **Track Maintenance Windows**\n\n- \"When is the next maintenance for Expanse?\"\n- \"Show me all scheduled maintenance for this week\"\n- \"Is there upcoming maintenance on Bridges-2?\"\n\n### üì¢ **System Announcements**\n\n- \"What are the latest system announcements?\"\n- \"Are there any important notices for ACCESS users?\"\n- \"Show me recent updates about system changes\"\n\n### ‚úÖ **Check Resource Status**\n\n- \"What's the current status of Anvil?\"\n- \"Is Frontera available for job submission?\"\n- \"Check if all GPU systems are operational\"\n\n## Detailed Usage Examples\n\n### Checking Current Outages\n\n**Natural Language**: \"Are there any systems down right now?\"\n\n**Tool Call**:\n```typescript\nconst outages = await get_current_outages();\n```\n\n**Returns**: List of active outages with:\n- Affected resources\n- Start time and expected resolution\n- Impact description\n- Workaround information if available\n\n### Finding Scheduled Maintenance\n\n**Natural Language**: \"When is Delta scheduled for maintenance?\"\n\n**Tool Call**:\n```typescript\nconst maintenance = await get_scheduled_maintenance({\n  resource_filter: \"delta\"\n});\n```\n\n**Returns**: Upcoming maintenance windows including:\n- Scheduled start and end times\n- Systems affected\n- Type of maintenance\n- Expected impact on users\n\n### Getting System Announcements\n\n**Natural Language**: \"What are the latest announcements?\"\n\n**Tool Call**:\n```typescript\nconst announcements = await get_system_announcements({\n  limit: 10\n});\n```\n\n**Returns**: Recent announcements about:\n- Policy changes\n- New features or services\n- Important deadlines\n- System-wide updates\n\n### Checking Specific Resource Status\n\n**Natural Language**: \"Is Expanse available?\"\n\n**Tool Call**:\n```typescript\nconst status = await get_resource_status({\n  resource_id: \"expanse.sdsc.xsede.org\"\n});\n```\n\n**Returns**: Current operational status:\n- Overall system health\n- Service availability\n- Performance metrics\n- Any active issues or limitations\n\n## API Endpoints\n\nThis server connects to the ACCESS-CI Operations API at `https://operations-api.access-ci.org`\n\n## License\n\nMIT\n"
  },
  {
    "id": "software-discovery",
    "name": "@access-mcp/software-discovery",
    "version": "0.3.0",
    "description": "ACCESS-CI Software Discovery Service MCP server",
    "main": "dist/index.js",
    "bin": {
      "access-mcp-software-discovery": "dist/index.js"
    },
    "readme": "# Software Discovery MCP Server\n\nMCP server for discovering software packages across ACCESS-CI compute resources. Features global software search across all resources, resource-specific browsing, and detailed package information using the Software Discovery Service (SDS) API.\n\n## Usage Examples\n\n### **Global Software Search**\n\n```\n\"Is TensorFlow available on ACCESS-CI resources?\"\n\"Find Python across all ACCESS systems\"\n\"What versions of GROMACS are available?\"\n\"Search for MATLAB on ACCESS-CI\"\n```\n\n### **Browse by Resource**\n\n```\n\"What software is available on Expanse?\"\n\"List all bioinformatics tools on Bridges-2\"\n\"Show me GPU-optimized software on Delta\"\n\"What modules are available on Anvil?\"\n```\n\n### **Category-Based Discovery**\n\n```\n\"Find all chemistry software packages\"\n\"What machine learning frameworks are available?\"\n\"Show me computational fluid dynamics tools\"\n\"List physics simulation software\"\n```\n\n### **Software Details**\n\n```\n\"Tell me about the PyTorch installation on Delta\"\n\"What modules do I need to load for VASP on Expanse?\"\n\"How do I use MATLAB on Anvil?\"\n\"Show me installation details for GROMACS on Bridges-2\"\n```\n\n## Installation & Configuration\n\n```bash\nnpm install -g @access-mcp/software-discovery\n```\n\nAdd to Claude Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"access-software-discovery\": {\n      \"command\": \"npx\",\n      \"args\": [\"@access-mcp/software-discovery\"],\n      \"env\": {\n        \"SDS_API_KEY\": \"your-api-key-here\"\n      }\n    }\n  }\n}\n```\n\n**Environment Variables:**\n- `SDS_API_KEY`: API key for the Software Discovery Service (required)\n\n**Resource ID Compatibility:** Supports both ACCESS-CI format (`anvil.purdue.access-ci.org`) and legacy XSEDE format (automatically converted).\n\n## Tools\n\n### search_software\n\nSearch for software packages across ACCESS-CI resources. Supports both global search (across all resources) and resource-specific search.\n\n**Parameters:**\n\n- `query` (string): Search query for software names (e.g., 'python', 'tensorflow', 'gromacs')\n- `resource_filter` (string, optional): Filter results by specific resource ID. If omitted, searches across all ACCESS-CI resources.\n\n**Examples:**\n- Global search: `search_software({query: \"tensorflow\"})` - finds TensorFlow across all resources\n- Resource-specific: `search_software({query: \"python\", resource_filter: \"delta.ncsa.access-ci.org\"})` - finds Python packages only on Delta\n\n### list_software_by_resource\n\nList all available software packages for a specific ACCESS-CI resource.\n\n**Parameters:**\n\n- `resource_id` (string): The resource ID (e.g., \"expanse.sdsc.access-ci.org\", legacy XSEDE format also supported)\n- `limit` (number, optional): Maximum number of results (default: 100)\n\n### get_software_details\n\nGet detailed information about a specific software package on a resource.\n\n**Parameters:**\n\n- `software_name` (string): Name of the software package\n- `resource_id` (string): The resource ID where the software is installed\n\n### get_software_categories\n\nGet available software categories and domains.\n\n**Parameters:**\n\n- `resource_id` (string, optional): Filter categories by specific resource\n\n## Resources\n\n- `accessci://software-discovery`: ACCESS-CI Software Discovery Service\n- `accessci://software/categories`: Browse software by category and domain\n\n## API Endpoints\n\nThis server connects to the ACCESS-CI Software Discovery Service at `https://ara-db.ccs.uky.edu`\n\n## License\n\nMIT"
  },
  {
    "id": "xdmod-charts",
    "name": "@access-mcp/xdmod-charts",
    "version": "0.4.0",
    "description": "MCP server for XDMoD Charts and Visualizations",
    "main": "dist/index.js",
    "bin": {
      "access-xdmod-charts": "dist/index.js"
    },
    "readme": "# XDMoD Charts MCP Server\n\nMCP server providing charts and visualizations from XDMoD (XD Metrics on Demand) Usage Analytics API endpoints for ACCESS-CI infrastructure. Generate SVG, PNG, and PDF charts, portal links, and advanced research visualizations with NSF Awards integration for comprehensive funding context.\n\n## Usage Examples\n\n### **Explore Available Metrics**\n\n```\n\"What dimensions are available in XDMoD?\"\n\"Show me all statistics for the Jobs dimension\"\n\"What metrics can I track for Cloud resources?\"\n```\n\n### **Get Usage Data**\n\n```\n\"Show me total CPU hours for January 2024\"\n\"What was the job count last month?\"\n\"Get me the average wait time data for Q1 2024\"\n```\n\n### **Generate Charts**\n\n```\n\"Create an SVG chart of CPU hours for the last 30 days\"\n\"Generate a high-resolution PNG chart of job counts for March 2024\"\n\"Show me a PDF chart of resource utilization trends\"\n```\n\n### **Portal Integration**\n\n```\n\"Give me a direct link to the CPU hours chart in XDMoD\"\n\"Generate a link to view GPU usage by resource in the portal\"\n\"How can I view this data interactively in the portal?\"\n```\n\n### **NSF Integration & Research Analysis**\n\n```\n\"Show me Dr. Smith's computational usage with their NSF funding context\"\n\"Analyze how NSF award 2138259's funding correlates with actual usage\"\n\"Generate a research profile for University of Illinois combining usage and NSF funding\"\n\"Compare funding allocation versus computational resource consumption\"\n```\n\n## Tools\n\n### get_dimensions\n\nGet all available dimensions from the XDMoD Usage Tab.\n\n**Parameters:** None\n\n**Returns:** List of all dimensions with their IDs, categories, and group-by fields.\n\n### get_statistics\n\nGet available statistics for a specific dimension.\n\n**Parameters:**\n\n- `dimension_id` (string): The dimension ID (e.g., \"Jobs_none\")\n- `category` (string): The realm/category (e.g., \"Jobs\")\n- `group_by` (string): The group by field (e.g., \"none\")\n\n**Returns:** List of statistics available for the specified dimension.\n\n### get_chart_data\n\nGet chart data and metadata for a specific statistic.\n\n**Parameters:**\n\n- `realm` (string): The realm (e.g., \"Jobs\")\n- `group_by` (string): The group by field (e.g., \"none\")\n- `statistic` (string): The statistic name (e.g., \"total_cpu_hours\")\n- `start_date` (string): Start date in YYYY-MM-DD format\n- `end_date` (string): End date in YYYY-MM-DD format\n- `dataset_type` (string, optional): Dataset type (default: \"timeseries\")\n\n**Returns:** Raw chart data including descriptions and metadata.\n\n### get_chart_image\n\nGet chart image (SVG, PNG, or PDF) for a specific statistic.\n\n**Parameters:**\n\n- `realm` (string): The realm (e.g., \"Jobs\")\n- `group_by` (string): The group by field (e.g., \"none\")\n- `statistic` (string): The statistic name (e.g., \"total_cpu_hours\")\n- `start_date` (string): Start date in YYYY-MM-DD format\n- `end_date` (string): End date in YYYY-MM-DD format\n- `format` (string, optional): Image format - \"svg\", \"png\", or \"pdf\" (default: \"svg\"). Note: PNG displays directly in Claude Desktop, SVG returns as data URL and code, PDF returns as downloadable data\n- `width` (number, optional): Image width in pixels (default: 916)\n- `height` (number, optional): Image height in pixels (default: 484)\n- `dataset_type` (string, optional): Dataset type (default: \"timeseries\")\n\n**Returns:** Chart image data in the requested format.\n\n### get_chart_link\n\nGenerate a direct link to view the chart in the XDMoD portal.\n\n**Parameters:**\n\n- `realm` (string): The realm (e.g., \"Jobs\", \"SUPREMM\")\n- `group_by` (string): The group by field (e.g., \"none\", \"resource\")\n- `statistic` (string): The statistic name (e.g., \"total_cpu_hours\", \"gpu_time\")\n\n**Returns:** Direct URL to view the interactive chart in XDMoD. Use the portal's filtering options to narrow down to specific resources, users, or other criteria.\n\n### get_nsf_award\n\nGet NSF award details for a specific award number.\n\n**Parameters:**\n\n- `award_number` (string): NSF award number (e.g., '2138259')\n\n### find_nsf_awards_by_pi\n\nFind NSF awards for a specific Principal Investigator.\n\n**Parameters:**\n\n- `pi_name` (string): Principal Investigator name to search for\n- `limit` (number, optional): Maximum number of awards to return (default: 10)\n\n### find_nsf_awards_by_personnel\n\nSearch NSF awards by Principal Investigator name.\n\n**Note:** Co-PI and Program Officer searches are not reliable in the NSF API and have been removed.\n\n**Parameters:**\n\n- `person_name` (string): Principal Investigator name to search for\n- `limit` (number, optional): Maximum number of awards to return (default: 10)\n\n### get_usage_with_nsf_context\n\nGet XDMoD usage data enriched with NSF funding context for a researcher or institution.\n\n**Parameters:**\n\n- `researcher_name` (string, optional): Name of researcher to analyze\n- `institution_name` (string, optional): Institution to analyze\n- `start_date` (string): Start date in YYYY-MM-DD format\n- `end_date` (string): End date in YYYY-MM-DD format\n- `limit` (number, optional): Maximum NSF awards to include (default: 10)\n\n**Returns:** Combined analysis including XDMoD usage metrics and associated NSF funding portfolio\n\n### analyze_funding_vs_usage\n\nCompare NSF funding amounts with actual XDMoD computational usage patterns.\n\n**Parameters:**\n\n- `nsf_award_number` (string): Specific NSF award number to analyze\n- `start_date` (string): Start date in YYYY-MM-DD format  \n- `end_date` (string): End date in YYYY-MM-DD format\n\n**Returns:** Comparative analysis of funding allocation versus computational resource consumption\n\n### institutional_research_profile\n\nGenerate a comprehensive research profile combining XDMoD usage patterns with NSF funding for an institution.\n\n**Parameters:**\n\n- `institution_name` (string): Institution name to profile\n- `start_date` (string): Start date in YYYY-MM-DD format\n- `end_date` (string): End date in YYYY-MM-DD format\n- `limit` (number, optional): Maximum NSF awards to include (default: 20)\n\n**Returns:** Comprehensive institutional profile with funding and usage correlation analysis\n\n### debug_auth_status\n\nCheck authentication status and debug information.\n\n**Parameters:** None\n\n**Returns:** Comprehensive debugging information including:\n- API token status and configuration\n- Available tools and their authentication requirements  \n- Troubleshooting guidance for authentication issues\n- Environment variable and command-line argument detection\n\n\n\n## Understanding Realms\n\nXDMoD organizes metrics into different **realms** that provide different types of data:\n\n### **Jobs Realm** \nBasic job accounting and resource usage metrics:\n- `total_cpu_hours` - Total CPU Hours\n- `job_count` - Number of Jobs Ended\n- `avg_cpu_hours` - Average CPU Hours per Job\n- `total_waitduration_hours` - Total Wait Duration Hours\n- `avg_waitduration_hours` - Average Wait Duration Hours\n- `max_processors` - Maximum Processor Count\n- `total_ace` - ACCESS Credit Equivalents Charged: Total\n- `utilization` - ACCESS CPU Utilization\n\n### **SUPREMM Realm** \nDetailed performance analytics and system metrics:\n- `gpu_time` - **GPU Hours: Total** üéØ\n- `avg_percent_gpu_usage` - **Avg GPU usage: weighted by GPU hour** üéØ\n- `wall_time` - CPU Hours: Total\n- `cpu_time_user` - CPU Hours: User: Total\n- `avg_percent_cpu_user` - Avg CPU %: User: weighted by core-hour\n- `avg_flops_per_core` - Avg: FLOPS: Per Core weighted by core-hour\n- `avg_memory_per_core` - Avg: Memory: Per Core weighted by core-hour\n- `avg_ib_rx_bytes` - Avg: InfiniBand rate: Per Node weighted by node-hour\n\n**Note:** For GPU metrics, always use the SUPREMM realm.\n\n## Authentication\n\nNo authentication required. The server accesses publicly available system-wide metrics data from XDMoD.\n\n## License\n\nMIT\n\n## Installation\n\n```bash\nnpm install -g @access-mcp/xdmod-charts\n```\n\nAdd to your Claude Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"xdmod-charts\": {\n      \"command\": \"npx\",\n      \"args\": [\"@access-mcp/xdmod-charts\"]\n    }\n  }\n}\n```\n"
  },
  {
    "id": "xdmod-data",
    "name": "xdmod-mcp-data",
    "version": "0.1.0",
    "description": "Python MCP server for XDMoD data access and analytics",
    "main": "src/server.py",
    "bin": {
      "xdmod-mcp-data": "xdmod-mcp-data"
    },
    "readme": "# XDMoD MCP Data Server\n\nA Python-based Model Context Protocol server for accessing XDMoD (XD Metrics on Demand) data using Python's data analytics capabilities for better data manipulation and user-specific queries. Features pandas integration, clean data structures, enhanced filtering, and framework integration with XDMoD's Python data analytics framework.\n\n## Usage Examples\n\n### **Authentication & Debug**\n\n```\n\"Debug my XDMoD data authentication and check what frameworks are available\"\n\"Test if the official XDMoD data framework is working\"\n```\n\n### **Personal Usage Data**\n\n```\n\"Get usage data for my ACCESS ID using the data server\"\n\"Show me CPU hours for my ACCESS ID from January to June 2025\"\n\"What's my computational usage for my ACCESS ID?\"\n```\n\n### **Data Analytics**\n\n```\n\"Get my usage data using the official data framework instead of REST API\"\n\"Analyze the team's computational patterns using ACCESS IDs\"\n\"Show me my usage trends for my ACCESS ID over the past 6 months\"\n```\n\n### **Framework Integration**\n\n```\n\"Test the XDMoD data analytics framework integration\"\n\"Use pandas to analyze my computational usage patterns\"\n\"Get clean structured data for my research usage\"\n```\n\n## Installation\n\n**For Claude Desktop (Recommended):**\n```bash\n# Install pipx if you don't have it\nbrew install pipx\n\n# Install from local development copy\ncd /path/to/access_mcp/packages/xdmod-data\npipx install .\n\n# Or install from GitHub (when published)\npipx install git+https://github.com/necyberteam/access-mcp.git#subdirectory=packages/xdmod-data\n```\n\n**For Development:**\n```bash\ncd /path/to/access_mcp/packages/xdmod-data\npython3 -m venv venv\nsource venv/bin/activate\npip install -e .\npip install xdmod-data  # Install official XDMoD Python framework\n```\n\n**Note:** This MCP server requires the official `xdmod-data` package for full functionality. The pipx installation method will automatically install it in an isolated environment.\n\n## Configuration\n\nAdd to your Claude Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"xdmod-mcp-data\": {\n      \"command\": \"xdmod-mcp-data\"\n    }\n  }\n}\n```\n\n**Note:** After installing with pipx, restart Claude Desktop to detect the new command.\n\n## Tools\n\n### `debug_python_auth`\nDebug authentication status and check for XDMoD data analytics framework availability.\n\n### `get_user_data_python`\nGet user-specific usage data using Python's data manipulation capabilities.\n\n**Parameters:**\n- `user_name`: Name to search for (e.g., \"Pasquale\")\n- `start_date`: Start date (YYYY-MM-DD)\n- `end_date`: End date (YYYY-MM-DD)\n- `realm`: XDMoD realm (default: \"Jobs\")\n- `statistic`: Statistic to retrieve (default: \"total_cpu_hours\")\n\n### `test_data_framework`\nTest integration with XDMoD's data analytics framework and check availability.\n\n## Usage Examples\n\nOnce configured, you can ask Claude:\n\n- \"Debug my XDMoD data authentication\"\n- \"Get my usage data using the data server for the last 6 months\"\n- \"Test the XDMoD data analytics framework\"\n\n## Comparison with XDMoD Charts Server\n\nThis data server aims to provide:\n- **Better data manipulation** with pandas\n- **Cleaner user data extraction** \n- **More intuitive API** for complex queries\n- **Framework integration** when available\n\n## Development\n\n```bash\n# Install in development mode\npip install -e \".[dev]\"\n\n# Run tests\npytest\n\n# Format code\nblack src/\n```"
  },
  {
    "id": "allocations",
    "name": "@access-mcp/allocations",
    "version": "0.3.1",
    "description": "MCP server for ACCESS-CI Allocations and Research Projects API",
    "main": "dist/index.js",
    "bin": {
      "access-allocations": "dist/index.js"
    },
    "readme": "# Allocations MCP Server\n\nAdvanced research project discovery with NSF funding integration and enterprise-grade search capabilities. Provides comprehensive access to active research projects and allocations across the ACCESS-CI ecosystem with boolean search operators, smart similarity matching, cross-platform funding analysis, and institutional research profiling.\n\n## Usage Examples\n\n### **Advanced Project Search**\n\n```\n\"Find machine learning projects on ACCESS\"\n\"Search for GPU computing research projects\"\n\"Show me quantum computing allocations from 2024\"\n\"Find projects using 'deep learning' but not 'computer vision'\"\n```\n\n### **Smart Discovery**\n\n```\n\"Find projects similar to machine learning on GPU clusters\"\n\"Show me research projects related to climate modeling\"\n\"Discover bioinformatics projects with large allocations\"\n\"What projects are similar to NSF award 2138259?\"\n```\n\n### **Institution Analysis**\n\n```\n\"Analyze NSF funding for ACCESS project 54321\"\n\"Generate a funding profile for University of Illinois\"\n\"Show me all projects from Stanford with their NSF awards\"\n\"Compare computational resources with research funding\"\n```\n\n### **Researcher Profiles**\n\n```\n\"Find all projects by Dr. Smith with NSF funding context\"\n\"Show me computational usage patterns for this research team\"\n\"Analyze funding efficiency across different research groups\"\n\"What NSF awards correlate with high ACCESS usage?\"\n```\n\n## Tools\n\n### search_projects\n\nAdvanced search for ACCESS-CI research projects with operators, filters, and sorting.\n\n**Parameters:**\n\n- `query` (string, **REQUIRED**): Search query supporting operators: `\"term1 AND term2\"`, `\"term1 OR term2\"`, `\"term1 NOT term2\"`, exact phrases with quotes\n- `field_of_science` (string, optional): Filter by field of science (e.g., 'Computer Science', 'Physics')\n- `allocation_type` (string, optional): Filter by allocation type (e.g., 'Discover', 'Explore', 'Accelerate')\n- `date_range` (object, optional): Filter by project date range with `start_date` and `end_date` in YYYY-MM-DD format\n- `min_allocation` (number, optional): Minimum allocation amount filter\n- `sort_by` (string, optional): Sort results by 'relevance', 'date_desc', 'date_asc', 'allocation_desc', 'allocation_asc', 'pi_name' (default: relevance)\n- `limit` (number, optional): Maximum results (default: 20, max: 100)\n\n**Example:**\n```typescript\n// User: \"Find machine learning projects with GPU but not TensorFlow from 2024\"\nconst projects = await search_projects({\n  query: '\"machine learning\" AND gpu NOT tensorflow',\n  field_of_science: \"Computer Science\",\n  date_range: { start_date: \"2024-01-01\", end_date: \"2024-12-31\" },\n  min_allocation: 10000,\n  sort_by: \"allocation_desc\",\n  limit: 10\n});\n```\n\n**Returns**: List of projects with titles, abstracts, PI information, institution details, resource allocations (ACCESS Credits), and grant numbers.\n\n### get_project_details\n\nGet detailed information about a specific research project.\n\n**Parameters:**\n\n- `project_id` (number): The project ID number\n\n### list_projects_by_field\n\nList projects by field of science.\n\n**Parameters:**\n\n- `field_of_science` (string): Field of science to filter by\n- `limit` (number, optional): Maximum number of results to return (default: 20)\n\n### list_projects_by_resource\n\nFind projects using specific computational resources.\n\n**Parameters:**\n\n- `resource_name` (string): Resource name to search for\n- `limit` (number, optional): Maximum number of results to return (default: 20)\n\n### get_allocation_statistics\n\nGet statistics about resource allocations and research trends.\n\n**Parameters:**\n\n- `pages_to_analyze` (number, optional): Number of pages to analyze for statistics (default: 5, max: 20)\n\n### find_similar_projects\n\nFind projects with similar research focus using advanced semantic matching.\n\n**Parameters:**\n\n- `project_id` (number, optional): Reference project ID to find similar projects\n- `keywords` (string, optional): Keywords or research terms to find similar projects (alternative to project_id)\n- `similarity_threshold` (number, optional): Minimum similarity score (0.0-1.0, default: 0.3)\n- `include_same_field` (boolean, optional): Whether to prioritize projects in the same field of science (default: true)\n- `show_similarity_scores` (boolean, optional): Whether to display similarity scores in results (default: true)\n- `limit` (number, optional): Maximum number of results (default: 10, max: 50)\n\n**Example:**\n```typescript\n// User: \"Find projects similar to project 12345 with 80% similarity\"\nconst similar = await find_similar_projects({\n  project_id: 12345,\n  similarity_threshold: 0.8,\n  show_similarity_scores: true,\n  include_same_field: true,\n  limit: 5\n});\n```\n\n**Returns**: Related projects with similarity percentages, multi-tier groupings (High 70%+, Moderate 40-70%), research domain overlap analysis, and collaboration potential assessment.\n\n### get_nsf_award\n\nGet NSF award details for a specific award number.\n\n**Parameters:**\n\n- `award_number` (string): NSF award number (e.g., '2138259')\n\n### analyze_project_funding\n\nComprehensive funding analysis with advanced PI name matching and institution validation.\n\n**Parameters:**\n\n- `project_id` (number, **REQUIRED**): ACCESS project ID to analyze for NSF funding connections\n\n### find_nsf_awards_by_pi\n\nFind NSF awards for a specific Principal Investigator.\n\n**Parameters:**\n\n- `pi_name` (string): Principal Investigator name to search for\n- `limit` (number, optional): Maximum number of awards to return (default: 10)\n\n### find_nsf_awards_by_personnel\n\nSearch NSF awards by Principal Investigator name. \n\n**Note:** Co-PI and Program Officer searches are not reliable in the NSF API and have been removed.\n\n**Parameters:**\n\n- `person_name` (string): Principal Investigator name to search for\n- `limit` (number, optional): Maximum number of awards to return (default: 10)\n\n### find_funded_projects\n\nFind ACCESS projects that have corresponding NSF funding with real cross-referencing.\n\n**Parameters:**\n\n- `pi_name` (string, optional): Principal investigator name\n- `institution_name` (string, optional): Institution name\n- `field_of_science` (string, optional): Field of science filter\n- `limit` (number, optional): Maximum number of results (default: 10)\n\n### institutional_funding_profile\n\nGenerate comprehensive funding profile for an institution with advanced name matching.\n\n**Parameters:**\n\n- `institution_name` (string, **REQUIRED**): Institution name to analyze\n- `limit` (number, optional): Maximum number of projects per source (default: 20)\n\n**Example:**\n```typescript\n// User: \"Generate a funding profile for University of Illinois\"\nconst profile = await institutional_funding_profile({\n  institution_name: \"University of Illinois at Urbana-Champaign\",\n  limit: 20\n});\n```\n\n## Resources\n\n- `accessci://allocations`: ACCESS-CI Research Projects and Allocations data\n\n## Advanced Search Syntax\n\n### Boolean Operators\n- **AND**: `\"machine learning AND gpu\"` - Both terms must be present\n- **OR**: `\"climate OR weather\"` - Either term can be present  \n- **NOT**: `\"modeling NOT simulation\"` - First term present, second absent\n\n### Exact Phrases\n- **Quoted strings**: `\"deep learning\"` - Exact phrase match\n- **Complex queries**: `\"neural networks\" AND gpu NOT tensorflow`\n\n### Filters & Sorting\n- **Date ranges**: `date_range: {start_date: \"2024-01-01\", end_date: \"2024-12-31\"}`\n- **Allocation threshold**: `min_allocation: 50000`\n- **Sort options**: `sort_by: \"allocation_desc\"` for largest allocations first\n\n## API Integration\n\nThis server connects to:\n- **ACCESS-CI Allocations portal**: `https://allocations.access-ci.org`\n- **NSF Awards MCP server**: HTTP communication for enriched funding data\n- **Inter-server architecture**: Enables complex cross-platform analysis\n\n**Important Note:** ACCESS Credits are computational resource credits, NOT monetary currency.\n\n## License\n\nMIT\n\n## Installation\n\n```bash\nnpm install -g @access-mcp/allocations\n```\n\nAdd to your Claude Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"access-allocations\": {\n      \"command\": \"npx\",\n      \"args\": [\"@access-mcp/allocations\"]\n    }\n  }\n}\n```"
  },
  {
    "id": "nsf-awards",
    "name": "@access-mcp/nsf-awards",
    "version": "0.1.0",
    "description": "MCP server for NSF awards and funding integration",
    "main": "dist/index.js",
    "bin": {
      "access-mcp-nsf-awards": "dist/index.js"
    },
    "readme": "# NSF Awards MCP Server\n\nA Model Context Protocol (MCP) server for accessing NSF awards and funding information. Provides comprehensive access to the National Science Foundation's awards database with award search, detailed information, flexible search strategies, and funding analysis capabilities.\n\n## Usage Examples\n\n### **Search by Principal Investigator**\n\n```\n\"Find NSF awards for Dr. Jane Smith\"\n\"Show me all awards where John Doe is the PI\"\n\"What grants has Maria Garcia received from NSF?\"\n```\n\n### **Search by Personnel**\n\n```\n\"Find awards where Dr. Smith is PI or Co-PI\"\n\"Show me all NSF funding for researchers at MIT\"\n\"What awards include Dr. Johnson as personnel?\"\n```\n\n### **Get Award Details**\n\n```\n\"Tell me about NSF award 2138259\"\n\"Show me the details of grant number 1947282\"\n\"What is the funding amount for award 2045674?\"\n```\n\n### **Funding Analysis**\n\n```\n\"How much NSF funding does Stanford receive annually?\"\n\"What's the average award size in computer science?\"\n\"Show me the largest NSF awards in the last 5 years\"\n```\n\n## Installation\n\n```bash\nnpm install -g @access-mcp/nsf-awards\n```\n\nAdd to your Claude Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"nsf-awards\": {\n      \"command\": \"npx\",\n      \"args\": [\"@access-mcp/nsf-awards\"]\n    }\n  }\n}\n```\n\n## Available Tools\n\n### `find_nsf_awards_by_pi`\nSearch for NSF awards where a specific person is the Principal Investigator.\n\n**Parameters:**\n- `pi_name` (string): Principal investigator name to search for\n- `limit` (number, optional): Maximum number of awards to return (default: 10)\n\n### `find_nsf_awards_by_personnel`\nSearch for NSF awards where a person is listed as PI or Co-PI.\n\n**Parameters:**\n- `person_name` (string): Person name to search for in award personnel\n- `limit` (number, optional): Maximum number of awards to return (default: 10)\n\n### `get_nsf_award`\nGet detailed information about a specific NSF award by award number.\n\n**Parameters:**\n- `award_number` (string): NSF award number (e.g., '2138259')\n\n### `find_nsf_awards_by_institution`\nSearch for NSF awards by institution name.\n\n**Parameters:**\n- `institution_name` (string): Institution name to search for\n- `limit` (number, optional): Maximum number of awards to return (default: 10)\n\n### `search_nsf_awards_by_keywords`\nSearch NSF awards by keywords in titles and abstracts.\n\n**Parameters:**\n- `keywords` (string): Keywords to search for in award titles and abstracts\n- `limit` (number, optional): Maximum number of awards to return (default: 10)\n\n## Installation\n\n```bash\ncd packages/nsf-awards\nnpm install\nnpm run build\n```\n\n## Usage\n\n### Direct execution:\n```bash\nnpm start\n```\n\n### As MCP Server:\nAdd to your MCP client configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"nsf-awards\": {\n      \"command\": \"access-mcp-nsf-awards\"\n    }\n  }\n}\n```\n\n## Data Source\n\nThis server uses the official NSF Awards API:\n- **API Base URL**: https://api.nsf.gov/services/v1/awards.json\n- **Rate Limits**: Respects NSF API rate limits\n- **Data Coverage**: Comprehensive NSF awards database\n\n## Example Queries\n\n1. **Find awards by researcher**:\n   ```\n   find_nsf_awards_by_pi: {\"pi_name\": \"John Smith\"}\n   ```\n\n2. **Get specific award details**:\n   ```\n   get_nsf_award: {\"award_number\": \"2138259\"}\n   ```\n\n3. **Search by institution**:\n   ```\n   find_nsf_awards_by_institution: {\"institution_name\": \"Stanford University\"}\n   ```\n\n4. **Search by research area**:\n   ```\n   search_nsf_awards_by_keywords: {\"keywords\": \"machine learning\"}\n   ```\n\n## Integration with Other Servers\n\nThis server is designed to work alongside:\n- **xdmod-python**: Cross-reference NSF awards with computational usage data\n- **xdmod-visualization**: Create visual reports combining funding and usage information\n\nUse NSF award information to:\n- Identify potential computational research projects\n- Analyze funding vs. computational usage patterns  \n- Track research impact and productivity\n- Find collaboration opportunities\n\n## Error Handling\n\nThe server includes robust error handling for:\n- Invalid award numbers\n- Network timeouts\n- API rate limiting\n- Malformed responses\n\n## Contributing\n\nSee the main ACCESS-MCP repository for contribution guidelines.\n\n## License\n\nMIT License - see LICENSE file for details."
  },
  {
    "id": "announcements",
    "name": "@access-mcp/announcements",
    "version": "0.1.0",
    "description": "MCP server for ACCESS Support Announcements API",
    "main": "dist/index.js",
    "bin": {
      "access-mcp-announcements": "dist/index.js"
    },
    "readme": ""
  }
];

export function getServerById(id) {
  return servers.find(server => server.id === id);
}

export function getActiveServers() {
  return servers.filter(server => server.status !== 'planned');
}
